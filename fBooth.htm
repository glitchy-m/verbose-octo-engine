<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Modern Photo Booth</title>

    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body {
            margin: 0;
            padding: 0;
            font-family: system-ui, -apple-system, sans-serif;
            touch-action: manipulation;
        }
        
        .full-screen-camera {
            width: 95vw;
            height: 85vh;
            object-fit: cover;
        }
        
        .camera-landscape {
            aspect-ratio: 16/9;
            width: 95vw;
            max-height: 85vh;
            object-fit: cover;
        }
        
        .camera-portrait {
            aspect-ratio: 9/16;
            height: 85vh;
            max-width: 95vw;
            object-fit: cover;
        }
        
        .qr-code-container {
            background: white;
            padding: 20px;
            border-radius: 16px;
            display: inline-block;
        }
    </style>
</head>
<body>
    <div id="root"></div>

    <script type="text/babel">
        const { useState, useRef, useCallback, useEffect } = React;

        // Lucide React Icons as components
        const Camera = ({ size = 24, className = "" }) => (
            <svg width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}>
                <path d="M14.5 4h-5L7 7H4a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2h-3l-2.5-3z"/>
                <circle cx="12" cy="13" r="3"/>
            </svg>
        );

        const Printer = ({ size = 24, className = "" }) => (
            <svg width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}>
                <polyline points="6,9 6,2 18,2 18,9"/>
                <path d="M6,18H4a2,2,0,0,1-2-2V11a2,2,0,0,1,2-2H20a2,2,0,0,1,2,2v5a2,2,0,0,1-2,2H18"/>
                <rect x="6" y="14" width="12" height="8"/>
            </svg>
        );

        const Mail = ({ size = 24, className = "" }) => (
            <svg width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}>
                <path d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"/>
                <polyline points="22,6 12,13 2,6"/>
            </svg>
        );

        const RotateCcw = ({ size = 24, className = "" }) => (
            <svg width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}>
                <path d="M3 2v6h6"/>
                <path d="M3 13a9 9 0 1 0 3-7.7L3 8"/>
            </svg>
        );

        const Check = ({ size = 24, className = "" }) => (
            <svg width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}>
                <polyline points="20,6 9,17 4,12"/>
            </svg>
        );

        const X = ({ size = 24, className = "" }) => (
            <svg width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}>
                <line x1="18" y1="6" x2="6" y2="18"/>
                <line x1="6" y1="6" x2="18" y2="18"/>
            </svg>
        );

        const PhotoBoothApp = () => {
            const [currentStep, setCurrentStep] = useState('welcome');
            const [orientation, setOrientation] = useState('');
            const [countdown, setCountdown] = useState(0);
            const [capturedPhoto, setCapturedPhoto] = useState(null);
            const [email, setEmail] = useState('');
            const [compressedPhoto, setCompressedPhoto] = useState('');
            const videoRef = useRef(null);
            const canvasRef = useRef(null);
            const streamRef = useRef(null);

            // Compress image to reduce size
            const compressImage = useCallback((dataUrl, quality = 0.6, maxWidth = 800) => {
                return new Promise((resolve) => {
                    const canvas = document.createElement('canvas');
                    const ctx = canvas.getContext('2d');
                    const img = new Image();
                    
                    img.onload = () => {
                        // Calculate new dimensions while maintaining aspect ratio
                        let { width, height } = img;
                        if (width > maxWidth) {
                            height = (height * maxWidth) / width;
                            width = maxWidth;
                        }
                        
                        canvas.width = width;
                        canvas.height = height;
                        
                        // Draw and compress
                        ctx.drawImage(img, 0, 0, width, height);
                        const compressedDataUrl = canvas.toDataURL('image/jpeg', quality);
                        resolve(compressedDataUrl);
                    };
                    
                    img.src = dataUrl;
                });
            }, []);

            // Initialize camera
            const initCamera = useCallback(async () => {
                try {
                    const constraints = {
                        video: {
                            facingMode: 'user',
                            width: { ideal: 1920 },
                            height: { ideal: 1080 }
                        }
                    };
                    
                    const stream = await navigator.mediaDevices.getUserMedia(constraints);
                    if (videoRef.current) {
                        videoRef.current.srcObject = stream;
                        streamRef.current = stream;
                    }
                } catch (err) {
                    console.error('Error accessing camera:', err);
                    alert('Camera access is required for the photo booth to work. Please allow camera access and refresh the page.');
                }
            }, []);

            // Stop camera
            const stopCamera = useCallback(() => {
                if (streamRef.current) {
                    streamRef.current.getTracks().forEach(track => track.stop());
                    streamRef.current = null;
                }
            }, []);

            // Start countdown and take photo
            const startCountdown = () => {
                setCountdown(5);
                const timer = setInterval(() => {
                    setCountdown(prev => {
                        if (prev <= 1) {
                            clearInterval(timer);
                            takePhoto();
                            return 0;
                        }
                        return prev - 1;
                    });
                }, 1000);
            };

            // Capture photo with aspect ratio cropping
            const takePhoto = () => {
                const video = videoRef.current;
                const canvas = canvasRef.current;
                const context = canvas.getContext('2d');
                
                const videoWidth = video.videoWidth;
                const videoHeight = video.videoHeight;
                
                let cropX = 0, cropY = 0, cropWidth = videoWidth, cropHeight = videoHeight;
                let canvasWidth, canvasHeight;
                
                if (orientation === 'landscape') {
                    // 16:9 aspect ratio
                    const targetAspectRatio = 16 / 9;
                    const videoAspectRatio = videoWidth / videoHeight;
                    
                    if (videoAspectRatio > targetAspectRatio) {
                        // Video is wider than 16:9, crop horizontally
                        cropHeight = videoHeight;
                        cropWidth = videoHeight * targetAspectRatio;
                        cropX = (videoWidth - cropWidth) / 2;
                        cropY = 0;
                    } else {
                        // Video is taller than 16:9, crop vertically
                        cropWidth = videoWidth;
                        cropHeight = videoWidth / targetAspectRatio;
                        cropX = 0;
                        cropY = (videoHeight - cropHeight) / 2;
                    }
                    canvasWidth = 1920;
                    canvasHeight = 1080;
                } else {
                    // 9:16 aspect ratio (portrait)
                    const targetAspectRatio = 9 / 16;
                    const videoAspectRatio = videoWidth / videoHeight;
                    
                    if (videoAspectRatio > targetAspectRatio) {
                        // Video is wider than 9:16, crop horizontally
                        cropHeight = videoHeight;
                        cropWidth = videoHeight * targetAspectRatio;
                        cropX = (videoWidth - cropWidth) / 2;
                        cropY = 0;
                    } else {
                        // Video is taller than 9:16, crop vertically
                        cropWidth = videoWidth;
                        cropHeight = videoWidth / targetAspectRatio;
                        cropX = 0;
                        cropY = (videoHeight - cropHeight) / 2;
                    }
                    canvasWidth = 1080;
                    canvasHeight = 1920;
                }
                
                canvas.width = canvasWidth;
                canvas.height = canvasHeight;
                
                // Draw cropped image to canvas
                context.drawImage(
                    video,
                    cropX, cropY, cropWidth, cropHeight,
                    0, 0, canvasWidth, canvasHeight
                );
                
                const photoData = canvas.toDataURL('image/jpeg', 0.9);
                setCapturedPhoto(photoData);
                stopCamera();
                setCurrentStep('review');
            };

            // Reset to welcome
            const resetToWelcome = () => {
                setCurrentStep('welcome');
                setOrientation('');
                setCapturedPhoto(null);
                setEmail('');
                setCountdown(0);
                setCompressedPhoto('');
                stopCamera();
            };

            // Initialize camera when moving to camera step
            useEffect(() => {
                if (currentStep === 'camera') {
                    initCamera();
                }
                return () => {
                    if (currentStep !== 'camera') {
                        stopCamera();
                    }
                };
            }, [currentStep, initCamera, stopCamera]);

            // Welcome Screen
            if (currentStep === 'welcome') {
                return (
                    <div className="min-h-screen bg-gradient-to-br from-purple-600 via-pink-500 to-red-500 flex items-center justify-center p-8">
                        <div className="text-center text-white max-w-2xl">
                            <div className="mb-8">
                                <Camera size={120} className="mx-auto mb-6 animate-pulse" />
                                <h1 className="text-6xl font-bold mb-4 tracking-wide">Photo Booth</h1>
                                <p className="text-2xl opacity-90 mb-8">Capture memories at your event!</p>
                                <div className="w-32 h-1 bg-white mx-auto rounded-full mb-8"></div>
                            </div>
                            <button
                                onClick={() => setCurrentStep('orientation')}
                                className="bg-white text-purple-600 px-12 py-6 rounded-full text-2xl font-semibold hover:bg-opacity-90 transition-all duration-300 transform hover:scale-105 shadow-2xl"
                            >
                                Get Started
                            </button>
                        </div>
                    </div>
                );
            }

            // Orientation Selection
            if (currentStep === 'orientation') {
                return (
                    <div className="min-h-screen bg-gradient-to-br from-blue-600 via-purple-600 to-pink-500 flex items-center justify-center p-8">
                        <div className="text-center text-white max-w-4xl">
                            <h2 className="text-5xl font-bold mb-8">Choose Photo Style</h2>
                            <p className="text-xl mb-12 opacity-90">How would you like your photo?</p>
                            
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                                <button
                                    onClick={() => {
                                        setOrientation('landscape');
                                        setCurrentStep('camera');
                                    }}
                                    className="bg-white bg-opacity-20 backdrop-blur-sm border-2 border-white border-opacity-30 rounded-3xl p-8 hover:bg-opacity-30 transition-all duration-300 transform hover:scale-105"
                                >
                                    <div className="w-40 h-28 bg-white bg-opacity-30 rounded-lg mx-auto mb-4 flex items-center justify-center">
                                        <div className="w-32 h-20 bg-white bg-opacity-50 rounded"></div>
                                    </div>
                                    <h3 className="text-2xl font-semibold">Landscape</h3>
                                    <p className="text-lg opacity-80 mt-2">Wide format photo</p>
                                </button>
                                
                                <button
                                    onClick={() => {
                                        setOrientation('portrait');
                                        setCurrentStep('camera');
                                    }}
                                    className="bg-white bg-opacity-20 backdrop-blur-sm border-2 border-white border-opacity-30 rounded-3xl p-8 hover:bg-opacity-30 transition-all duration-300 transform hover:scale-105"
                                >
                                    <div className="w-28 h-40 bg-white bg-opacity-30 rounded-lg mx-auto mb-4 flex items-center justify-center">
                                        <div className="w-20 h-32 bg-white bg-opacity-50 rounded"></div>
                                    </div>
                                    <h3 className="text-2xl font-semibold">Portrait</h3>
                                    <p className="text-lg opacity-80 mt-2">Tall format photo</p>
                                </button>
                            </div>
                            
                            <button
                                onClick={() => setCurrentStep('welcome')}
                                className="mt-8 text-white text-xl underline hover:no-underline transition-all"
                            >
                                ← Back
                            </button>
                        </div>
                    </div>
                );
            }

            // Camera View
            if (currentStep === 'camera') {
                return (
                    <div className="min-h-screen bg-black flex flex-col items-center justify-center p-2">
                        <div className="relative w-full h-full flex items-center justify-center">
                            <video
                                ref={videoRef}
                                autoPlay
                                playsInline
                                muted
                                className={`rounded-2xl shadow-2xl ${
                                    orientation === 'landscape' ? 'camera-landscape' : 'camera-portrait'
                                }`}
                            />
                            
                            {countdown > 0 && (
                                <div className="absolute inset-0 flex items-center justify-center bg-black bg-opacity-50 rounded-2xl">
                                    <div className="text-white text-9xl font-bold animate-ping">
                                        {countdown}
                                    </div>
                                </div>
                            )}
                            
                            <div className="absolute top-4 left-4 right-4 flex justify-between items-center">
                                <div className="bg-red-500 text-white px-4 py-2 rounded-full text-sm font-semibold">
                                    ● LIVE
                                </div>
                                <div className="text-white text-lg font-semibold bg-black bg-opacity-50 px-4 py-2 rounded-full">
                                    {orientation.toUpperCase()}
                                </div>
                            </div>
                        </div>
                        
                        <div className="mt-4 flex gap-4">
                            <button
                                onClick={startCountdown}
                                disabled={countdown > 0}
                                className="bg-white text-black px-8 py-4 rounded-full text-xl font-semibold hover:bg-gray-100 transition-all duration-300 transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed shadow-lg flex items-center gap-2"
                            >
                                <Camera size={24} />
                                {countdown > 0 ? 'Taking Photo...' : 'Take Photo'}
                            </button>
                            
                            <button
                                onClick={() => setCurrentStep('orientation')}
                                className="bg-gray-700 text-white px-6 py-4 rounded-full text-lg hover:bg-gray-600 transition-all"
                            >
                                Back
                            </button>
                        </div>
                        
                        <canvas ref={canvasRef} className="hidden" />
                    </div>
                );
            }

            // Photo Review
            if (currentStep === 'review') {
                return (
                    <div className="min-h-screen bg-gradient-to-br from-green-600 via-blue-600 to-purple-600 flex items-center justify-center p-8">
                        <div className="text-center text-white max-w-4xl">
                            <h2 className="text-4xl font-bold mb-8">How does this look?</h2>
                            
                            <div className="mb-8">
                                <img
                                    src={capturedPhoto}
                                    alt="Captured"
                                    className={`rounded-2xl shadow-2xl mx-auto object-contain ${
                                        orientation === 'landscape' 
                                            ? 'max-w-2xl w-full aspect-video' 
                                            : 'max-w-md w-full aspect-[9/16]'
                                    }`}
                                />
                            </div>
                            
                            <div className="flex gap-4 justify-center">
                                <button
                                    onClick={() => setCurrentStep('share')}
                                    className="bg-green-500 text-white px-8 py-4 rounded-full text-xl font-semibold hover:bg-green-400 transition-all transform hover:scale-105 shadow-lg flex items-center gap-2"
                                >
                                    <Check size={24} />
                                    Perfect!
                                </button>
                                
                                <button
                                    onClick={() => {
                                        setCapturedPhoto(null);
                                        setCurrentStep('camera');
                                    }}
                                    className="bg-red-500 text-white px-8 py-4 rounded-full text-xl font-semibold hover:bg-red-400 transition-all transform hover:scale-105 shadow-lg flex items-center gap-2"
                                >
                                    <X size={24} />
                                    Retake
                                </button>
                            </div>
                        </div>
                    </div>
                );
            }

            // Share Options
            if (currentStep === 'share') {
                return (
                    <div className="min-h-screen bg-gradient-to-br from-orange-500 via-pink-500 to-purple-600 flex items-center justify-center p-8">
                        <div className="text-center text-white max-w-4xl">
                            <h2 className="text-4xl font-bold mb-8">Share Your Photo</h2>
                            <p className="text-xl mb-8 opacity-90">How would you like to get your photo?</p>
                            
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
                                <button
                                    onClick={() => {
                                        // Simulate printing
                                        alert('Photo sent to printer! Please collect your photo.');
                                        setCurrentStep('another');
                                    }}
                                    className="bg-white bg-opacity-20 backdrop-blur-sm border-2 border-white border-opacity-30 rounded-2xl p-6 hover:bg-opacity-30 transition-all duration-300 transform hover:scale-105"
                                >
                                    <Printer size={48} className="mx-auto mb-4" />
                                    <h3 className="text-2xl font-semibold mb-2">Print Photo</h3>
                                    <p className="opacity-80">Get a physical copy</p>
                                </button>
                                
                                <div className="bg-white bg-opacity-20 backdrop-blur-sm border-2 border-white border-opacity-30 rounded-2xl p-6">
                                    <Mail size={48} className="mx-auto mb-4" />
                                    <h3 className="text-2xl font-semibold mb-4">Email Photo</h3>
                                    <input
                                        type="email"
                                        placeholder="Enter email address"
                                        value={email}
                                        onChange={(e) => setEmail(e.target.value)}
                                        className="w-full px-4 py-3 rounded-lg text-black text-lg mb-4"
                                    />
                                    <button
                                        onClick={() => {
                                            if (email) {
                                                alert(`Photo sent to ${email}!`);
                                                setCurrentStep('another');
                                            }
                                        }}
                                        disabled={!email}
                                        className="w-full bg-blue-500 text-white py-3 rounded-lg font-semibold hover:bg-blue-400 transition-all disabled:opacity-50 disabled:cursor-not-allowed"
                                    >
                                        Send Email
                                    </button>
                                </div>
                            </div>
                            
                            <button
                                onClick={() => setCurrentStep('another')}
                                className="text-white text-lg underline hover:no-underline transition-all"
                            >
                                Skip for now →
                            </button>
                        </div>
                    </div>
                );
            }

            // Take Another Photo
            if (currentStep === 'another') {
                return (
                    <div className="min-h-screen bg-gradient-to-br from-teal-500 via-green-500 to-blue-500 flex items-center justify-center p-8">
                        <div className="text-center text-white max-w-2xl">
                            <div className="mb-8">
                                <Check size={80} className="mx-auto mb-6 text-green-300" />
                                <h2 className="text-4xl font-bold mb-4">All Done!</h2>
                                <p className="text-xl opacity-90">Thanks for using our photo booth!</p>
                            </div>
                            
                            <div className="flex gap-4 justify-center">
                                <button
                                    onClick={() => setCurrentStep('orientation')}
                                    className="bg-white text-green-600 px-8 py-4 rounded-full text-xl font-semibold hover:bg-opacity-90 transition-all transform hover:scale-105 shadow-lg flex items-center gap-2"
                                >
                                    <RotateCcw size={24} />
                                    Take Another Photo
                                </button>
                                
                                <button
                                    onClick={resetToWelcome}
                                    className="bg-green-500 text-white px-8 py-4 rounded-full text-xl font-semibold hover:bg-green-400 transition-all transform hover:scale-105 shadow-lg"
                                >
                                    Finish
                                </button>
                            </div>
                        </div>
                    </div>
                );
            }

            return null;
        };

        ReactDOM.render(<PhotoBoothApp />, document.getElementById('root'));
    </script>
</body>
</html>