<!DOCTYPE html>
<html lang="en" class="h-full">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dynamic Calendar Display</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <script src="https://apis.google.com/js/api.js"></script>
    <script src="https://accounts.google.com/gsi/client" async defer></script>
    <style>
        /* Custom styles and animations */
        body {
            font-family: 'Inter', sans-serif;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }

        /* --- Animated Weather Backgrounds --- */
        .weather-bg {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
            transition: background-color 2s ease-in-out, opacity 1.5s ease-in-out;
            overflow: hidden;
        }

        .weather-clear-day { background: linear-gradient(to bottom, #87CEEB, #4682B4); }
        .weather-clear-night { background: linear-gradient(to bottom, #0f172a, #0c0a09); }
        .weather-clouds-day { background: linear-gradient(to bottom, #B0C4DE, #778899); }
        .weather-clouds-night { background: linear-gradient(to bottom, #334155, #1e293b); }
        .weather-rain-day, .weather-drizzle-day, .weather-thunderstorm-day { background: linear-gradient(to bottom, #465875, #1f2937); }
        .weather-rain-night, .weather-drizzle-night, .weather-thunderstorm-night { background: linear-gradient(to bottom, #1e293b, #0f172a); }
        .weather-snow-day { background: linear-gradient(to bottom, #e0e0e0, #a0a0a0); }
        .weather-snow-night { background: linear-gradient(to bottom, #64748b, #334155); }
        
        .weather-night-mode { background-color: #0c0a09; }

        .raindrop, .star, .cloud {
            position: absolute;
            opacity: 0;
            animation-duration: 2s;
            animation-timing-function: linear;
            animation-iteration-count: infinite;
        }

        .raindrop {
            width: 2px;
            height: 15px;
            background: linear-gradient(to bottom, rgba(255,255,255,0), rgba(255,255,255,0.4));
            animation-name: fall;
        }

        @keyframes fall {
            0% { transform: translateY(-10vh); opacity: 1; }
            100% { transform: translateY(110vh); opacity: 1; }
        }
        
        .star {
            width: 2px;
            height: 2px;
            background-color: white;
            border-radius: 50%;
            animation-name: twinkle;
            animation-duration: 1.5s;
        }
        
        @keyframes twinkle {
            0%, 100% { opacity: 0; }
            50% { opacity: 0.8; }
        }
        
        .cloud {
            width: 200px;
            height: 60px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 100px;
            animation-name: move-cloud;
            animation-duration: 60s;
        }
        .cloud::before, .cloud::after {
            content: '';
            position: absolute;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 50%;
        }
        .cloud::before { width: 100px; height: 80px; top: -40px; left: 20px; }
        .cloud::after { width: 120px; height: 60px; top: -30px; right: 30px; }

        @keyframes move-cloud {
            0% { transform: translateX(-250px); }
            100% { transform: translateX(110vw); }
        }

        /* --- View Transitions --- */
        .view {
            display: none;
            animation: fadeIn 0.8s ease-in-out;
            opacity: 0;
            will-change: opacity;
        }

        .view.active {
            display: flex;
            opacity: 1;
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        
        /* --- Calendar Grid --- */
        .calendar-grid {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 1px;
            background-color: rgba(255, 255, 255, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        .calendar-day, .calendar-header {
            background-color: rgba(17, 24, 39, 0.5);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
        }
        .calendar-day { min-height: 10vh; }
        .calendar-day.other-month { opacity: 0.4; }
        
        /* Dense View */
        .dense-day {
            min-height: 18vh;
            display: flex;
            flex-direction: column;
        }
    </style>
</head>
<body class="h-full bg-gray-900 text-white overflow-hidden">
    <!-- Weather Background -->
    <div id="weather-bg" class="weather-bg"></div>

    <!-- Main Container -->
    <div class="relative flex flex-col h-full p-4 sm:p-6 md:p-8 lg:p-12">
        
        <!-- Auth Screen -->
        <div id="auth-screen" class="absolute inset-0 z-50 flex items-center justify-center bg-gray-900/80 backdrop-blur-md">
            <div class="text-center">
                <h1 class="text-3xl font-bold mb-4">Welcome to Your Dynamic Display</h1>
                <p id="auth-message" class="mb-6 text-gray-300">Please connect your Google Calendar to see your events.</p>
                <button id="authorize-button" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg transition-colors disabled:bg-gray-500 disabled:cursor-not-allowed" disabled>
                    Initializing...
                </button>
            </div>
        </div>

        <!-- Header Controls -->
        <div id="header-controls" class="absolute top-4 right-4 z-40 flex items-center gap-4 hidden">
            <select id="calendar-selector" class="bg-gray-800/50 text-white rounded-md p-2 border border-gray-600"></select>
            <select id="month-selector" class="bg-gray-800/50 text-white rounded-md p-2 border border-gray-600"></select>
            <select id="view-selector" class="bg-gray-800/50 text-white rounded-md p-2 border border-gray-600">
                <option value="quick-look-view">Quick Look</option>
                <option value="monthly-view">Monthly</option>
                <option value="dense-view">Dense</option>
            </select>
        </div>

        <!-- Quick Look View -->
        <div id="quick-look-view" class="view flex-col justify-between h-full w-full">
            <div class="flex justify-between items-start">
                <div>
                    <div id="quick-time" class="text-6xl md:text-8xl lg:text-9xl font-bold tracking-tight"></div>
                    <div id="quick-date" class="text-3xl md:text-4xl lg:text-5xl font-medium text-gray-300"></div>
                </div>
                <div id="quick-weather" class="text-right">
                    <div class="flex items-center justify-end gap-4">
                        <div id="quick-weather-emoji" class="text-5xl md:text-6xl"></div>
                        <div id="quick-temp" class="text-3xl md:text-5xl font-semibold"></div>
                    </div>
                </div>
            </div>
            <div class="flex-grow flex items-center justify-center">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-8 lg:gap-16 w-full max-w-6xl">
                    <div id="events-container" class="space-y-6"></div>
                    <div class="flex items-center">
                         <blockquote id="quote-container" class="text-2xl md:text-3xl lg:text-4xl font-light italic text-gray-200">"..."</blockquote>
                    </div>
                </div>
            </div>
        </div>

        <!-- Monthly View -->
        <div id="monthly-view" class="view flex-col h-full w-full">
            <h1 id="calendar-title" class="text-4xl md:text-5xl font-bold mb-4"></h1>
            <div id="calendar-header" class="calendar-grid">
                <div class="calendar-header p-2 text-center font-semibold text-gray-300">SUN</div>
                <div class="calendar-header p-2 text-center font-semibold text-gray-300">MON</div>
                <div class="calendar-header p-2 text-center font-semibold text-gray-300">TUE</div>
                <div class="calendar-header p-2 text-center font-semibold text-gray-300">WED</div>
                <div class="calendar-header p-2 text-center font-semibold text-gray-300">THU</div>
                <div class="calendar-header p-2 text-center font-semibold text-gray-300">FRI</div>
                <div class="calendar-header p-2 text-center font-semibold text-gray-300">SAT</div>
            </div>
            <div id="calendar-body" class="calendar-grid flex-grow"></div>
        </div>

        <!-- Dense View -->
        <div id="dense-view" class="view flex-col h-full w-full">
            <h1 id="dense-calendar-title" class="text-4xl md:text-5xl font-bold mb-4"></h1>
            <div id="dense-calendar-header" class="calendar-grid">
                 <div class="calendar-header p-2 text-center font-semibold text-gray-300">SUN</div>
                 <div class="calendar-header p-2 text-center font-semibold text-gray-300">MON</div>
                 <div class="calendar-header p-2 text-center font-semibold text-gray-300">TUE</div>
                 <div class="calendar-header p-2 text-center font-semibold text-gray-300">WED</div>
                 <div class="calendar-header p-2 text-center font-semibold text-gray-300">THU</div>
                 <div class="calendar-header p-2 text-center font-semibold text-gray-300">FRI</div>
                 <div class="calendar-header p-2 text-center font-semibold text-gray-300">SAT</div>
            </div>
            <div id="dense-calendar-body" class="calendar-grid flex-grow"></div>
        </div>

        <!-- Night View -->
        <div id="night-view" class="view flex-col justify-center items-center h-full w-full text-center">
             <div id="night-time" class="text-7xl md:text-9xl font-bold tracking-tight"></div>
             <div id="night-date" class="text-4xl md:text-6xl font-medium text-gray-300"></div>
             <div id="night-weather" class="flex items-center justify-center gap-4 mt-8">
                <div id="night-weather-emoji" class="text-4xl"></div>
                <div id="night-temp" class="text-2xl md:text-3xl font-semibold"></div>
            </div>
            <p class="mt-12 text-2xl text-gray-400">Good night!</p>
        </div>

    </div>

    <script type="module">
        // --- CONFIGURATION ---
        const GOOGLE_CLIENT_ID = '415018106195-utjkai9r1ar3pd6ep5f06kt5ma0tfg0k.apps.googleusercontent.com';
        const GOOGLE_API_KEY = 'AIzaSyA-Gqmhu3nG6jAPE8VFyzWv5Ppdbf1Ot8k';
        const OPENWEATHER_API_KEY = 'e59fe270071be5ed24b5a1ec85ef84c3';
        const OPENAI_API_KEY = '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';
        
        // --- STATE ---
        let gapiInited = false;
        let activeViewId = 'quick-look-view';
        let viewInterval;
        let tokenClient;
        let currentWeatherData = {};
        let currentEvents = [];
        let calendarColors = {};

        // --- DOM Elements ---
        const authScreen = document.getElementById('auth-screen');
        const authorizeButton = document.getElementById('authorize-button');
        const headerControls = document.getElementById('header-controls');
        const calendarSelector = document.getElementById('calendar-selector');
        const monthSelector = document.getElementById('month-selector');
        const viewSelector = document.getElementById('view-selector');
        const weatherBg = document.getElementById('weather-bg');
        // ... (add other DOM element selectors here for brevity)

        // --- CORE LOGIC ---
        function initializeApp() {
            updateTimeAndDate();
            setInterval(updateTimeAndDate, 1000);
            fetchWeatherAndQuote();
            setInterval(fetchWeatherAndQuote, 15 * 60 * 1000); // every 15 mins
            gapi.load('client', initializeGapiClient);
            
            // Event Listeners for controls
            calendarSelector.addEventListener('change', refreshAllData);
            monthSelector.addEventListener('change', refreshAllData);
            viewSelector.addEventListener('change', (e) => switchView(e.target.value));
            
            setupMonthSelector();
        }

        // --- TIME, DATE & MODE SWITCHING ---
        function updateTimeAndDate() {
            const now = new Date();
            const hours = now.getHours();
            const isNight = hours >= 22 || hours < 5;
            
            const timeString = now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', hour12: true });
            const dateString = now.toLocaleDateString([], { day: 'numeric', month: 'long' });

            if (isNight) {
                if (activeViewId !== 'night-view') {
                    switchView('night-view');
                    updateWeatherEffects(true);
                }
                document.getElementById('night-time').textContent = timeString;
                document.getElementById('night-date').textContent = dateString;
            } else {
                if (activeViewId === 'night-view') {
                    switchView(viewSelector.value); // Return to selected view
                    updateWeatherEffects(false);
                }
                document.getElementById('quick-time').textContent = timeString;
                document.getElementById('quick-date').textContent = dateString;
            }
        }
        
        // --- VIEW MANAGEMENT ---
        function switchView(viewId, manual = false) {
             if (manual && viewId !== 'dense-view' && viewId !== 'night-view') {
                clearInterval(viewInterval);
                viewInterval = setInterval(() => {
                    const nextIndex = (['quick-look-view', 'monthly-view'].indexOf(activeViewId) + 1) % 2;
                    switchView(['quick-look-view', 'monthly-view'][nextIndex]);
                }, 30000);
            } else {
                 clearInterval(viewInterval);
            }
            if(viewId === 'dense-view'){
                 clearInterval(viewInterval);
            }

            activeViewId = viewId;
            document.querySelectorAll('.view').forEach(v => v.classList.remove('active'));
            document.getElementById(viewId).classList.add('active');
        }

        function setupMonthSelector() {
            const months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
            const currentMonth = new Date().getMonth();
            months.forEach((month, index) => {
                const option = document.createElement('option');
                option.value = index;
                option.textContent = month;
                if (index === currentMonth) option.selected = true;
                monthSelector.appendChild(option);
            });
        }
        
        // --- GOOGLE CALENDAR API ---
        async function initializeGapiClient() {
            try {
                await gapi.client.init({
                    apiKey: GOOGLE_API_KEY,
                    discoveryDocs: ["https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest"],
                });
                gapiInited = true;
                tokenClient = google.accounts.oauth2.initTokenClient({
                    client_id: GOOGLE_CLIENT_ID,
                    scope: 'https://www.googleapis.com/auth/calendar.readonly https://www.googleapis.com/auth/calendar.events.readonly',
                    callback: '',
                });
                authorizeButton.disabled = false;
                authorizeButton.textContent = 'Connect Google Calendar';
            } catch (err) {
                console.error("GAPI/Token Client Error:", err);
            }
        }
        
        authorizeButton.addEventListener('click', () => {
             tokenClient.callback = async (resp) => {
                if (resp.error) throw resp;
                authScreen.style.display = 'none';
                headerControls.classList.remove('hidden');
                await loadCalendarList();
                await refreshAllData();
                switchView('quick-look-view', true);
            };
            if (gapi.client.getToken() === null) {
                tokenClient.requestAccessToken({prompt: 'consent'});
            } else {
                tokenClient.requestAccessToken({prompt: ''});
            }
        });

        async function refreshAllData() {
            await fetchEventsForMonth();
            renderAllViews();
        }

        async function loadCalendarList() {
            const response = await gapi.client.calendar.calendarList.list();
            calendarSelector.innerHTML = '';
            response.result.items.forEach(cal => {
                const option = document.createElement('option');
                option.value = cal.id;
                option.textContent = cal.summary;
                if (cal.primary) option.selected = true;
                calendarSelector.appendChild(option);
                calendarColors[cal.id] = cal.backgroundColor;
            });
        }

        async function fetchEventsForMonth() {
            const calendarId = calendarSelector.value;
            const selectedMonth = parseInt(monthSelector.value);
            const year = new Date().getFullYear();
            const timeMin = new Date(year, selectedMonth, 1).toISOString();
            const timeMax = new Date(year, selectedMonth + 1, 0).toISOString();

            try {
                const response = await gapi.client.calendar.events.list({
                    'calendarId': calendarId,
                    'timeMin': timeMin, 'timeMax': timeMax,
                    'showDeleted': false, 'singleEvents': true, 'orderBy': 'startTime'
                });
                currentEvents = response.result.items;
            } catch(err) {
                 console.error('Error fetching events:', err);
                 currentEvents = [];
            }
        }
        
        function renderAllViews() {
            renderQuickLook();
            renderMonthlyView();
            renderDenseView();
        }

        function renderQuickLook() {
            const eventsContainer = document.getElementById('events-container');
            const now = new Date();
            const upcomingEvents = currentEvents
                .filter(e => new Date(e.start.dateTime || e.start.date) >= now)
                .slice(0, 2);

            eventsContainer.innerHTML = '';
            if (upcomingEvents.length === 0) {
                 eventsContainer.innerHTML = '<p class="text-xl text-gray-300">No upcoming events this month.</p>';
                 return;
            }
            upcomingEvents.forEach((event, index) => {
                 const { summary, start } = event;
                 const startDate = new Date(start.dateTime || start.date);
                 const diffDays = Math.ceil((startDate.setHours(0,0,0,0) - now.setHours(0,0,0,0)) / (1000 * 60 * 60 * 24));
                 const relativeTime = diffDays === 0 ? 'Today' : diffDays === 1 ? 'Tomorrow' : `in ${diffDays} days`;

                 const eventEl = document.createElement('div');
                 if (index === 0) {
                     eventEl.innerHTML = `<p class="text-xl text-gray-300">${startDate.toLocaleDateString([], {day: 'numeric', month: 'long' })}</p>
                                          <h2 class="text-4xl lg:text-5xl font-bold truncate">${summary}</h2>
                                          <p class="text-2xl text-gray-200">${relativeTime}</p>
                                          <hr class="mt-4 border-t-2 border-white w-1/3">`;
                 } else {
                      eventEl.innerHTML = `<p class="text-lg text-gray-300">${startDate.toLocaleDateString([], {day: 'numeric', month: 'long' })}</p>
                                           <h2 class="text-3xl lg:text-4xl font-semibold truncate">${summary}</h2>
                                           <p class="text-xl text-gray-200">${relativeTime}</p>`;
                 }
                 eventsContainer.appendChild(eventEl);
            });
        }

        function renderMonthlyView(dense = false) {
            const bodyId = dense ? 'dense-calendar-body' : 'calendar-body';
            const titleId = dense ? 'dense-calendar-title' : 'calendar-title';
            const dayClass = dense ? 'dense-day' : '';

            const calendarBodyEl = document.getElementById(bodyId);
            const titleEl = document.getElementById(titleId);

            const year = new Date().getFullYear();
            const month = parseInt(monthSelector.value);
            
            titleEl.textContent = new Date(year, month).toLocaleDateString([], { month: 'long', year: 'numeric' });
            calendarBodyEl.innerHTML = '';

            const firstDay = new Date(year, month, 1).getDay();
            const daysInMonth = new Date(year, month + 1, 0).getDate();

            for (let i = 0; i < firstDay; i++) {
                calendarBodyEl.innerHTML += `<div class="calendar-day other-month p-2"></div>`;
            }

            for (let day = 1; day <= daysInMonth; day++) {
                const dayEvents = currentEvents.filter(e => new Date(e.start.dateTime || e.start.date).getDate() === day);
                let dayHtml = `<div class="calendar-day p-2 overflow-hidden ${dayClass} ${new Date().getDate() === day && new Date().getMonth() === month ? 'bg-blue-800/50' : ''}">
                                <div class="font-semibold text-right">${day}</div>
                                <div class="text-xs space-y-1 mt-1 flex-grow overflow-y-auto">`;
                
                if (dense) {
                    dayEvents.forEach(e => {
                         dayHtml += `<div class="p-1 rounded mb-1 text-left" style="background-color: ${calendarColors[e.organizer.email] || '#4a5568'}">
                                        <p class="font-bold truncate">${e.summary}</p>
                                        <p class="truncate text-gray-300 text-[10px]">${e.description || ''}</p>
                                        <p class="truncate text-gray-300 text-[10px]"><strong>By:</strong> ${e.creator.displayName || e.creator.email}</p>
                                     </div>`;
                    });
                } else {
                    dayEvents.forEach(e => {
                        dayHtml += `<div class="bg-blue-600 rounded px-1 truncate">${e.summary}</div>`;
                    });
                }

                dayHtml += `</div></div>`;
                calendarBodyEl.innerHTML += dayHtml;
            }
        }
        
        function renderDenseView() {
            renderMonthlyView(true);
        }

        // --- EXTERNAL APIS (Weather, Quotes) ---
        async function fetchWeatherAndQuote() {
             if (!navigator.geolocation) return;
             navigator.geolocation.getCurrentPosition(async (position) => {
                const { latitude, longitude } = position.coords;
                const url = `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${OPENWEATHER_API_KEY}&units=imperial`;
                try {
                    const response = await fetch(url);
                    const data = await response.json();
                    currentWeatherData = {
                        temp: `${Math.round(data.main.temp)}°F`,
                        main: data.weather[0].main,
                        description: data.weather[0].description
                    };
                    updateWeatherUI();
                    updateWeatherEffects(document.getElementById('night-view').classList.contains('active'));
                    fetchAIQuote();
                } catch(err) { console.error("Error fetching weather:", err); }
            });
        }
        
        function updateWeatherUI() {
            const emoji = getWeatherEmoji(currentWeatherData.main);
            document.getElementById('quick-temp').textContent = currentWeatherData.temp;
            document.getElementById('quick-weather-emoji').textContent = emoji;
            document.getElementById('night-temp').textContent = currentWeatherData.temp;
            document.getElementById('night-weather-emoji').textContent = emoji;
        }

        function updateWeatherEffects(isNight) {
            const weatherType = (currentWeatherData.main || 'clear').toLowerCase();
            weatherBg.className = `weather-bg weather-${weatherType}-${isNight ? 'night' : 'day'}`;
            
            // Clear old effects
            const oldEffects = weatherBg.querySelectorAll('.raindrop, .star, .cloud');
            oldEffects.forEach(el => el.remove());
            
            // Add new effects
            if (['rain', 'drizzle', 'thunderstorm'].includes(weatherType)) {
                for(let i=0; i<50; i++) addEffect('raindrop');
            } else if (isNight) {
                for(let i=0; i<100; i++) addEffect('star');
            } else if (weatherType.includes('cloud')) {
                for(let i=0; i<5; i++) addEffect('cloud');
            }
        }

        function addEffect(type) {
            const el = document.createElement('div');
            el.className = type;
            el.style.left = `${Math.random() * 100}vw`;
            const duration = 2 + Math.random() * 3;
            const delay = Math.random() * 5;
            el.style.animationDuration = `${duration}s`;
            el.style.animationDelay = `${delay}s`;

            if (type === 'cloud') {
                 el.style.top = `${Math.random() * 30}vh`;
                 el.style.animationDuration = `${40 + Math.random() * 40}s`;
            } else if (type === 'raindrop') {
                 el.style.animationDuration = `${0.5 + Math.random() * 0.5}s`;
            }
            weatherBg.appendChild(el);
        }

        function getWeatherEmoji(weather) {
            const map = { Clear: '☀️', Clouds: '☁️', Rain: '🌧️', Drizzle: '💧', Thunderstorm: '⛈️', Snow: '❄️' };
            return map[weather] || '🌫️'; // Default for mist, fog etc.
        }
        
        async function fetchAIQuote() {
            const prompt = `Generate a short, insightful, one-sentence quote.
                           The current time is ${new Date().toLocaleTimeString()}.
                           The weather is ${currentWeatherData.description || 'clear'}.
                           My next calendar event is: ${currentEvents[0]?.summary || 'nothing scheduled'}.
                           Keep the quote generic but inspired by these elements.`;
            try {
                const response = await fetch("https://api.openai.com/v1/chat/completions", {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${OPENAI_API_KEY}`
                    },
                    body: JSON.stringify({
                        model: "gpt-3.5-turbo",
                        messages: [{ role: "user", content: prompt }],
                        temperature: 0.7,
                        max_tokens: 40,
                    })
                });
                const data = await response.json();
                let quote = data.choices[0].message.content.trim();
                if (quote.startsWith('"') && quote.endsWith('"')) {
                    quote = quote.substring(1, quote.length - 1);
                }
                document.getElementById('quote-container').textContent = `"${quote}"`;
            } catch (err) {
                console.error("Error fetching AI quote:", err);
                document.getElementById('quote-container').textContent = `"The future belongs to those who believe in the beauty of their dreams."`;
            }
        }

        // --- INITIALIZATION ---
        window.onload = initializeApp;
    </script>
</body>
</html>

