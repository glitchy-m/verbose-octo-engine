<!DOCTYPE html>
<html lang="en" class="h-full">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dynamic Calendar Display</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <script src="https://apis.google.com/js/api.js"></script>
    <script src="https://accounts.google.com/gsi/client" async defer></script>
    <style>
        /* Custom styles and animations */
        body {
            font-family: 'Inter', sans-serif;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
            transition: color 2s ease-in-out;
        }

        /* --- Animated Weather Backgrounds --- */
        .weather-bg {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
            transition: background 2s ease-in-out;
            overflow: hidden;
        }
        
        .raindrop, .star, .cloud {
            position: absolute;
            opacity: 0;
            animation-duration: 2s;
            animation-timing-function: linear;
            animation-iteration-count: infinite;
        }

        .raindrop {
            width: 2px;
            height: 15px;
            background: linear-gradient(to bottom, rgba(255,255,255,0), rgba(255,255,255,0.4));
            animation-name: fall;
        }

        @keyframes fall {
            0% { transform: translateY(-10vh); opacity: 1; }
            100% { transform: translateY(110vh); opacity: 1; }
        }
        
        .star {
            width: 2px;
            height: 2px;
            background-color: white;
            border-radius: 50%;
            animation-name: twinkle;
        }
        
        @keyframes twinkle {
            0%, 100% { opacity: 0; }
            50% { opacity: 0.8; }
        }
        
        .cloud {
            width: 200px;
            height: 60px;
            background: var(--cloud-color);
            border-radius: 100px;
            animation-name: move-cloud;
        }
        .cloud::before, .cloud::after {
            content: '';
            position: absolute;
            background: var(--cloud-color);
            border-radius: 50%;
        }
        .cloud::before { width: 100px; height: 80px; top: -40px; left: 20px; }
        .cloud::after { width: 120px; height: 60px; top: -30px; right: 30px; }

        @keyframes move-cloud {
            0% { transform: translateX(-250px); }
            100% { transform: translateX(110vw); }
        }

        /* --- View Transitions --- */
        .view {
            display: none;
            animation: fadeIn 0.8s ease-in-out;
            opacity: 0;
            will-change: opacity;
        }

        .view.active {
            display: flex;
            opacity: 1;
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        @keyframes pulse-border {
            0%, 100% { border-color: #f59e0b; }
            50% { border-color: #fcd34d; }
        }

        .new-event-alert { animation: pulse-border 2s infinite; }
        
        /* --- Calendar Grid --- */
        .calendar-grid {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 1px;
            background-color: rgba(255, 255, 255, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        .calendar-day, .calendar-header {
            background-color: rgba(17, 24, 39, 0.5);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
        }
        .calendar-day { min-height: 10vh; }
        .calendar-day.other-month { opacity: 0.4; }
        
        #toggle-controls-btn { transition: opacity 0.5s ease-in-out; }
    </style>
</head>
<body class="h-full bg-gray-900 text-white overflow-hidden">
    <!-- Weather Background -->
    <div id="weather-bg" class="weather-bg"></div>

    <!-- Main Container -->
    <div id="main-container" class="relative flex flex-col h-full p-4 sm:p-6 md:p-8 lg:p-12">
        
        <!-- Loading Screen -->
        <div id="loading-screen" class="absolute inset-0 z-50 flex flex-col items-center justify-center bg-gray-900/90 backdrop-blur-sm transition-opacity duration-500">
            <div class="w-full max-w-md text-center">
                <h1 class="text-3xl font-bold mb-4">Initializing Display...</h1>
                <div class="w-full bg-gray-700 rounded-full h-2.5 mb-2">
                    <div id="progress-bar" class="bg-blue-600 h-2.5 rounded-full" style="width: 0%; transition: width 0.5s ease-out;"></div>
                </div>
                <p id="loading-message" class="text-gray-300">Getting things ready...</p>
            </div>
        </div>

        <!-- Auth Screen -->
        <div id="auth-screen" class="absolute inset-0 z-40 flex items-center justify-center bg-gray-900/80 backdrop-blur-md hidden">
            <div class="text-center">
                <h1 class="text-3xl font-bold mb-4">Welcome to Your Dynamic Display</h1>
                <p class="mb-6 text-gray-300">Please connect your Google Calendar to see your events.</p>
                <button id="authorize-button" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg transition-colors disabled:bg-gray-500 disabled:cursor-not-allowed" disabled>
                    Initializing...
                </button>
            </div>
        </div>

        <!-- Master Controls Toggle -->
        <button id="toggle-controls-btn" class="absolute top-4 left-4 z-50 text-white p-2 bg-black/20 rounded-full hover:bg-black/40 transition-all">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="opacity-75"><circle cx="12" cy="12" r="3"></circle><path d="M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z"></path></svg>
        </button>

        <!-- Settings & Debug Panel -->
        <div id="settings-panel" class="absolute top-16 left-4 z-50 bg-black/30 backdrop-blur-md p-4 rounded-lg space-y-4 hidden text-white w-64">
            <div>
                <h3 class="font-bold text-lg mb-2">Display Settings</h3>
                <div class="space-y-2 text-sm">
                    <p class="font-semibold">Auto-Cycle Views:</p>
                    <div id="cycle-views-options" class="grid grid-cols-2 gap-2"></div>
                    <label class="flex items-center justify-between"><p>Night Start:</p><input type="time" id="night-start-time" class="bg-gray-700/50 rounded p-1 border-gray-600/50 border w-28"></label>
                    <label class="flex items-center justify-between"><p>Night End:</p><input type="time" id="night-end-time" class="bg-gray-700/50 rounded p-1 border-gray-600/50 border w-28"></label>
                </div>
            </div>
            <div>
                <h3 class="font-bold text-lg mb-2">Debug Controls</h3>
                 <div class="space-y-2 text-sm">
                    <label class="flex items-center justify-between"><p>Time:</p><input type="time" id="debug-time" class="bg-gray-700/50 rounded p-1 border-gray-600/50 border w-28"></label>
                    <label class="flex items-center justify-between"><p>Weather:</p><select id="debug-weather" class="bg-gray-700/50 rounded p-1 border-gray-600/50 border w-28"><option value="">Live</option><option>Clear</option><option>Clouds</option><option>Rain</option><option>Drizzle</option><option>Thunderstorm</option><option>Snow</option></select></label>
                </div>
            </div>
        </div>

        <!-- Header Controls -->
        <div id="header-controls" class="absolute top-4 right-4 z-40 flex items-center gap-4 hidden">
            <select id="calendar-selector" class="bg-black/20 text-white rounded-md p-2 border border-white/20"></select>
            <select id="month-selector" class="bg-black/20 text-white rounded-md p-2 border border-white/20 hidden"></select>
            <select id="view-selector" class="bg-black/20 text-white rounded-md p-2 border border-white/20"></select>
        </div>

        <!-- All Views -->
        <div id="quick-look-view" class="view flex-col justify-between h-full w-full"> /* Content is identical to previous versions, redacted for brevity */ </div>
        <div id="monthly-view" class="view flex-col h-full w-full"> /* Content is identical to previous versions, redacted for brevity */ </div>
        <div id="weekly-view" class="view flex-col h-full w-full">
            <h1 id="weekly-title" class="text-4xl md:text-5xl font-bold mb-4">This Week</h1>
            <div id="weekly-body" class="flex-grow space-y-2 overflow-y-auto pr-2"></div>
        </div>
        <div id="dense-view" class="view flex-col h-full w-full"> /* Content is identical to previous versions, redacted for brevity */ </div>
        <div id="night-view" class="view flex-col justify-center items-center h-full w-full text-center"> /* Content is identical to previous versions, redacted for brevity */ </div>
        <div id="new-event-view" class="view flex-col justify-center items-center h-full w-full text-center"> /* Content is identical to previous versions, redacted for brevity */ </div>
    </div>

    <script type="module">
        // --- CONFIGURATION ---
        const GOOGLE_CLIENT_ID = '415018106195-utjkai9r1ar3pd6ep5f06kt5ma0tfg0k.apps.googleusercontent.com';
        const GOOGLE_API_KEY = 'AIzaSyA-Gqmhu3nG6jAPE8VFyzWv5Ppdbf1Ot8k';
        const OPENWEATHER_API_KEY = 'e59fe270071be5ed24b5a1ec85ef84c3';
        const OPENAI_API_KEY = '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';
        const VIEW_DEFINITIONS = [
            { id: 'quick-look-view', name: 'Quick Look' },
            { id: 'monthly-view', name: 'Monthly' },
            { id: 'weekly-view', name: 'Weekly' },
            { id: 'dense-view', name: 'Dense' },
        ];
        
        // --- STATE ---
        let settings = {};
        let activeViewId = 'quick-look-view';
        let viewInterval;
        let tokenClient;
        let currentWeatherData = {};
        let currentEvents = [];
        let calendarColors = {};
        let controlsHideTimeout;
        let debugMode = { time: null, weather: null };

        // --- DOM Elements ---
        const mainContainer = document.getElementById('main-container');
        const toggleControlsBtn = document.getElementById('toggle-controls-btn');
        const settingsPanel = document.getElementById('settings-panel');
        // ... other DOM elements

        // --- CORE LOGIC ---
        function initializeApp() {
            loadSettings();
            setupEventListeners();
            updateTimeAndDate();
            setInterval(updateTimeAndDate, 1000 * 60); 
            gapi.load('client', initializeGapiClient);
            showControlsTemporarily();
        }

        function setupEventListeners() {
            document.body.addEventListener('mousemove', showControlsTemporarily);
            toggleControlsBtn.addEventListener('click', () => settingsPanel.classList.toggle('hidden'));
            settingsPanel.addEventListener('change', handleSettingsChange);
            // ... other event listeners
        }

        function showControlsTemporarily() {
            toggleControlsBtn.style.opacity = '1';
            clearTimeout(controlsHideTimeout);
            controlsHideTimeout = setTimeout(() => {
                if (!settingsPanel.matches(':hover')) {
                     toggleControlsBtn.style.opacity = '0';
                }
            }, 3000);
        }

        // --- SETTINGS MANAGEMENT ---
        function loadSettings() {
            const savedSettings = localStorage.getItem('dynamicDisplaySettings');
            const defaultSettings = {
                lastCalendarId: null,
                cycleViews: ['quick-look-view', 'monthly-view'],
                nightStart: '22:00',
                nightEnd: '05:00',
            };
            settings = savedSettings ? JSON.parse(savedSettings) : defaultSettings;
            
            const cycleOptionsContainer = document.getElementById('cycle-views-options');
            cycleOptionsContainer.innerHTML = '';
            VIEW_DEFINITIONS.forEach(view => {
                 const isChecked = settings.cycleViews.includes(view.id);
                 cycleOptionsContainer.innerHTML += `<label class="flex items-center gap-2"><input type="checkbox" data-viewid="${view.id}" class="cycle-view-checkbox bg-gray-700/50" ${isChecked ? 'checked' : ''}>${view.name}</label>`;
            });
            document.getElementById('night-start-time').value = settings.nightStart;
            document.getElementById('night-end-time').value = settings.nightEnd;
        }

        function saveSettings() {
            localStorage.setItem('dynamicDisplaySettings', JSON.stringify(settings));
        }

        function handleSettingsChange(e) {
            if (e.target.classList.contains('cycle-view-checkbox')) {
                const viewId = e.target.dataset.viewid;
                if (e.target.checked) {
                    settings.cycleViews.push(viewId);
                } else {
                    settings.cycleViews = settings.cycleViews.filter(id => id !== viewId);
                }
            }
            if (e.target.id === 'night-start-time') settings.nightStart = e.target.value;
            if (e.target.id === 'night-end-time') settings.nightEnd = e.target.value;
            
            saveSettings();
            // Re-initialize view cycling with new settings
            switchView(activeViewId, true); 
        }
        
        // --- TIME, DATE & THEME ---
        function getDynamicTheme(hour) {
            if (hour >= 5 && hour < 7) return { bg: 'linear-gradient(to bottom, #3a5a8a, #f7b733)', text: '#FFFFFF' }; // Sunrise
            if (hour >= 7 && hour < 17) return { bg: 'linear-gradient(to bottom, #87CEEB, #4682B4)', text: '#000000' }; // Day
            if (hour >= 17 && hour < 19) return { bg: 'linear-gradient(to bottom, #ff7e5f, #feb47b)', text: '#FFFFFF' }; // Sunset
            if (hour >= 19 && hour < 22) return { bg: 'linear-gradient(to bottom, #0f172a, #3a5a8a)', text: '#FFFFFF' }; // Evening
            return { bg: 'linear-gradient(to bottom, #0c0a09, #1e293b)', text: '#FFFFFF' }; // Night
        }

        function updateTimeAndDate() {
            const now = new Date();
            if (debugMode.time) { /* ... */ }
            const hours = now.getHours();
            
            const [startH] = settings.nightStart.split(':').map(Number);
            const [endH] = settings.nightEnd.split(':').map(Number);
            const isNight = hours >= startH || hours < endH;
            
            const theme = getDynamicTheme(hours);
            weatherBg.style.background = theme.bg;
            mainContainer.style.color = theme.text;
            
             if (isNight) {
                if (activeViewId !== 'night-view') switchView('night-view');
            } else {
                 if (activeViewId === 'night-view') switchView(settings.cycleViews[0] || 'quick-look-view');
            }
            // ... update time text elements ...
        }

        // --- VIEW MANAGEMENT ---
        function switchView(viewId, manualSwitch = false) {
            clearInterval(viewInterval);
            // ...
            if (settings.cycleViews.length > 1 && settings.cycleViews.includes(viewId) && !manualSwitch) {
                viewInterval = setInterval(() => {
                    const currentIndex = settings.cycleViews.indexOf(activeViewId);
                    const nextIndex = (currentIndex + 1) % settings.cycleViews.length;
                    switchView(settings.cycleViews[nextIndex]);
                }, 30000);
            }
            // ...
        }
        
        // --- RENDERING VIEWS ---
        function renderAllViews() {
            // ... existing render calls
            renderWeeklyView();
        }
        
        function renderWeeklyView() {
            const weeklyBody = document.getElementById('weekly-body');
            weeklyBody.innerHTML = '';
            const today = new Date();
            const startOfWeek = new Date(today.setDate(today.getDate() - today.getDay()));

            for (let i = 0; i < 7; i++) {
                const day = new Date(startOfWeek);
                day.setDate(startOfWeek.getDate() + i);
                const dayEvents = currentEvents.filter(e => new Date(e.start.dateTime || e.start.date).toDateString() === day.toDateString());
                
                let dayHtml = `<div class="p-2 rounded-lg bg-black/10">
                                <h3 class="font-bold text-lg border-b border-white/20 pb-1 mb-2">${day.toLocaleDateString([], { weekday: 'long', month: 'short', day: 'numeric' })}</h3>`;
                
                if (dayEvents.length > 0) {
                    dayEvents.forEach(e => {
                        const time = e.start.dateTime ? new Date(e.start.dateTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) : 'All Day';
                        dayHtml += `<div class="flex items-start gap-2 text-sm ml-2"><p class="w-20">${time}</p><p class="flex-1">${e.summary}</p></div>`;
                    });
                } else {
                    dayHtml += `<p class="text-sm ml-2 text-gray-400">No events</p>`;
                }
                dayHtml += `</div>`;
                weeklyBody.innerHTML += dayHtml;
            }
        }
        
        // --- EXTERNAL APIS (QUOTES) ---
        async function fetchAIQuote() {
            const prompt = `Generate a short, insightful, one-sentence quote. The time is ${new Date().toLocaleTimeString()}, weather is ${currentWeatherData.description || 'clear'}. My next event is: ${currentEvents[0]?.summary || 'nothing'}. Keep it generic but inspired.`;
            try {
                const response = await fetch("https://api.openai.com/v1/chat/completions", {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${OPENAI_API_KEY}` },
                    body: JSON.stringify({
                        model: "gpt-3.5-turbo",
                        messages: [{ role: "user", content: prompt }],
                        temperature: 0.7,
                        max_tokens: 40,
                    })
                });
                if (!response.ok) {
                    const errorBody = await response.json();
                    throw new Error(`OpenAI API Error: ${errorBody.error.message}`);
                }
                const data = await response.json();
                let quote = data.choices[0].message.content.trim().replace(/^"|"$/g, '');
                document.getElementById('quote-container').textContent = `"${quote}"`;
            } catch (err) {
                console.error("Error fetching AI quote:", err);
                document.getElementById('quote-container').textContent = `"The future belongs to those who believe in the beauty of their dreams."`;
            }
        }

        // --- GOOGLE API & AUTH ---
        async function loadCalendarList() {
            // ... existing logic ...
            if(settings.lastCalendarId) {
                calendarSelector.value = settings.lastCalendarId;
            }
        }

        // --- INITIALIZATION ---
        window.onload = initializeApp;
    </script>
</body>
</html>

