<!DOCTYPE html>
<html lang="en" class="h-full">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dynamic Calendar Display</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <script src="https://apis.google.com/js/api.js"></script>
    <script src="https://accounts.google.com/gsi/client" async defer></script>
    <style>
        /* Custom styles and animations */
        body {
            font-family: 'Inter', sans-serif;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
            transition: color 2s ease-in-out;
        }

        /* --- Animated Weather Backgrounds --- */
        .weather-bg {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
            transition: background 2s ease-in-out;
            overflow: hidden;
        }
        
        .raindrop, .star, .cloud {
            position: absolute;
            opacity: 0;
            animation-duration: 2s;
            animation-timing-function: linear;
            animation-iteration-count: infinite;
        }

        .raindrop {
            width: 2px;
            height: 15px;
            background: linear-gradient(to bottom, rgba(255,255,255,0), rgba(255,255,255,0.4));
            animation-name: fall;
        }

        @keyframes fall {
            0% { transform: translateY(-10vh); opacity: 1; }
            100% { transform: translateY(110vh); opacity: 1; }
        }
        
        .star {
            width: 2px;
            height: 2px;
            background-color: white;
            border-radius: 50%;
            animation-name: twinkle;
        }
        
        @keyframes twinkle {
            0%, 100% { opacity: 0; }
            50% { opacity: 0.8; }
        }
        
        .cloud {
            width: 200px;
            height: 60px;
            background: var(--cloud-color);
            border-radius: 100px;
            animation-name: move-cloud;
        }
        .cloud::before, .cloud::after {
            content: '';
            position: absolute;
            background: var(--cloud-color);
            border-radius: 50%;
        }
        .cloud::before { width: 100px; height: 80px; top: -40px; left: 20px; }
        .cloud::after { width: 120px; height: 60px; top: -30px; right: 30px; }

        @keyframes move-cloud {
            0% { transform: translateX(-250px); }
            100% { transform: translateX(110vw); }
        }

        /* --- View Transitions --- */
        .view {
            display: none;
            animation: fadeIn 0.8s ease-in-out;
            opacity: 0;
            will-change: opacity;
        }

        .view.active {
            display: flex;
            opacity: 1;
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        @keyframes pulse-border {
            0%, 100% { border-color: #f59e0b; }
            50% { border-color: #fcd34d; }
        }

        .new-event-alert { animation: pulse-border 2s infinite; }
        
        /* --- Calendar Grid --- */
        .calendar-grid {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 1px;
            background-color: rgba(255, 255, 255, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        .calendar-day, .calendar-header {
            background-color: rgba(17, 24, 39, 0.5);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
        }
        .calendar-day { min-height: 10vh; }
        .calendar-day.other-month { opacity: 0.4; }
        
        #toggle-controls-btn { transition: opacity 0.5s ease-in-out; }
    </style>
</head>
<body class="h-full bg-gray-900 text-white overflow-hidden">
    <!-- Weather Background -->
    <div id="weather-bg" class="weather-bg"></div>

    <!-- Main Container -->
    <div id="main-container" class="relative flex flex-col h-full p-4 sm:p-6 md:p-8 lg:p-12">
        
        <!-- Loading Screen -->
        <div id="loading-screen" class="absolute inset-0 z-50 flex flex-col items-center justify-center bg-gray-900/90 backdrop-blur-sm transition-opacity duration-500">
            <div class="w-full max-w-md text-center">
                <h1 class="text-3xl font-bold mb-4">Initializing Display...</h1>
                <div class="w-full bg-gray-700 rounded-full h-2.5 mb-2">
                    <div id="progress-bar" class="bg-blue-600 h-2.5 rounded-full" style="width: 0%; transition: width 0.5s ease-out;"></div>
                </div>
                <p id="loading-message" class="text-gray-300">Getting things ready...</p>
            </div>
        </div>

        <!-- Auth Screen -->
        <div id="auth-screen" class="absolute inset-0 z-40 flex items-center justify-center bg-gray-900/80 backdrop-blur-md hidden">
            <div class="text-center">
                <h1 class="text-3xl font-bold mb-4">Welcome to Your Dynamic Display</h1>
                <p class="mb-6 text-gray-300">Please connect your Google Calendar to see your events.</p>
                <button id="authorize-button" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg transition-colors disabled:bg-gray-500 disabled:cursor-not-allowed" disabled>
                    Initializing...
                </button>
            </div>
        </div>

        <!-- Master Controls Toggle -->
        <button id="toggle-controls-btn" class="absolute top-4 left-4 z-50 text-white p-2 bg-black/20 rounded-full hover:bg-black/40 transition-all">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="opacity-75"><circle cx="12" cy="12" r="3"></circle><path d="M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z"></path></svg>
        </button>

        <!-- Settings & Debug Panel -->
        <div id="settings-panel" class="absolute top-16 left-4 z-50 bg-black/30 backdrop-blur-md p-4 rounded-lg space-y-4 hidden text-white w-64">
            <div>
                <h3 class="font-bold text-lg mb-2">Display Settings</h3>
                <div class="space-y-2 text-sm">
                    <p class="font-semibold">Auto-Cycle Views:</p>
                    <div id="cycle-views-options" class="grid grid-cols-2 gap-2"></div>
                    <label class="flex items-center justify-between"><p>Night Start:</p><input type="time" id="night-start-time" class="bg-gray-700/50 rounded p-1 border-gray-600/50 border w-28"></label>
                    <label class="flex items-center justify-between"><p>Night End:</p><input type="time" id="night-end-time" class="bg-gray-700/50 rounded p-1 border-gray-600/50 border w-28"></label>
                </div>
            </div>
            <div>
                <h3 class="font-bold text-lg mb-2">Debug Controls</h3>
                 <div class="space-y-2 text-sm">
                    <label class="flex items-center justify-between"><p>Time:</p><input type="time" id="debug-time" class="bg-gray-700/50 rounded p-1 border-gray-600/50 border w-28"></label>
                    <label class="flex items-center justify-between"><p>Weather:</p><select id="debug-weather" class="bg-gray-700/50 rounded p-1 border-gray-600/50 border w-28"><option value="">Live</option><option>Clear</option><option>Clouds</option><option>Rain</option><option>Drizzle</option><option>Thunderstorm</option><option>Snow</option></select></label>
                </div>
            </div>
        </div>

        <!-- Header Controls -->
        <div id="header-controls" class="absolute top-4 right-4 z-40 flex items-center gap-4 hidden">
            <select id="calendar-selector" class="bg-black/20 text-white rounded-md p-2 border border-white/20"></select>
            <select id="month-selector" class="bg-black/20 text-white rounded-md p-2 border border-white/20 hidden"></select>
            <select id="view-selector" class="bg-black/20 text-white rounded-md p-2 border border-white/20"></select>
        </div>

        <!-- All Views -->
        <div id="quick-look-view" class="view flex-col justify-between h-full w-full">
            <div class="flex justify-between items-start">
                <div>
                    <div id="quick-time" class="text-6xl md:text-8xl lg:text-9xl font-bold tracking-tight"></div>
                    <div id="quick-date" class="text-3xl md:text-4xl lg:text-5xl font-medium"></div>
                </div>
                <div id="quick-weather" class="text-right">
                    <div class="flex items-center justify-end gap-4">
                        <div id="quick-weather-emoji" class="text-5xl md:text-6xl"></div>
                        <div id="quick-temp" class="text-3xl md:text-5xl font-semibold"></div>
                    </div>
                </div>
            </div>
            <div class="flex-grow flex items-center justify-center">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-8 lg:gap-16 w-full max-w-6xl">
                    <div id="events-container" class="space-y-6"></div>
                    <div class="flex items-center">
                         <blockquote id="quote-container" class="text-2xl md:text-3xl lg:text-4xl font-light italic">"..."</blockquote>
                    </div>
                </div>
            </div>
        </div>
        <div id="monthly-view" class="view flex-col h-full w-full">
            <h1 id="calendar-title" class="text-4xl md:text-5xl font-bold mb-4"></h1>
            <div id="calendar-header" class="calendar-grid">
                <div class="calendar-header p-2 text-center font-semibold">SUN</div>
                <div class="calendar-header p-2 text-center font-semibold">MON</div>
                <div class="calendar-header p-2 text-center font-semibold">TUE</div>
                <div class="calendar-header p-2 text-center font-semibold">WED</div>
                <div class="calendar-header p-2 text-center font-semibold">THU</div>
                <div class="calendar-header p-2 text-center font-semibold">FRI</div>
                <div class="calendar-header p-2 text-center font-semibold">SAT</div>
            </div>
            <div id="calendar-body" class="calendar-grid flex-grow"></div>
        </div>
        <div id="weekly-view" class="view flex-col h-full w-full">
            <h1 id="weekly-title" class="text-4xl md:text-5xl font-bold mb-4">This Week</h1>
            <div id="weekly-body" class="flex-grow space-y-2 overflow-y-auto pr-2"></div>
        </div>
        <div id="dense-view" class="view flex-col h-full w-full">
            <h1 id="dense-calendar-title" class="text-4xl md:text-5xl font-bold mb-4"></h1>
            <div id="dense-calendar-header" class="calendar-grid">
                 <div class="calendar-header p-2 text-center font-semibold">SUN</div>
                 <div class="calendar-header p-2 text-center font-semibold">MON</div>
                 <div class="calendar-header p-2 text-center font-semibold">TUE</div>
                 <div class="calendar-header p-2 text-center font-semibold">WED</div>
                 <div class="calendar-header p-2 text-center font-semibold">THU</div>
                 <div class="calendar-header p-2 text-center font-semibold">FRI</div>
                 <div class="calendar-header p-2 text-center font-semibold">SAT</div>
            </div>
            <div id="dense-calendar-body" class="calendar-grid flex-grow"></div>
        </div>
        <div id="night-view" class="view flex-col justify-center items-center h-full w-full text-center">
            <div id="night-time" class="text-7xl md:text-9xl font-bold tracking-tight"></div>
            <div id="night-date" class="text-4xl md:text-6xl font-medium"></div>
            <div id="night-weather" class="flex items-center justify-center gap-4 mt-8">
               <div id="night-weather-emoji" class="text-4xl"></div>
               <div id="night-temp" class="text-2xl md:text-3xl font-semibold"></div>
           </div>
           <p class="mt-12 text-2xl">Good night!</p>
        </div>
        <div id="new-event-view" class="view flex-col justify-center items-center h-full w-full text-center">
            <div class="p-8 rounded-lg border-4 border-amber-400 bg-gray-900/70 backdrop-blur-xl max-w-3xl new-event-alert">
                <h2 class="text-3xl font-bold text-amber-300 mb-4">🚨 NEW EVENT ADDED 🚨</h2>
                <p id="new-event-title" class="text-6xl font-bold mb-2"></p>
                <p id="new-event-time" class="text-4xl"></p>
                <p class="text-lg mt-6">Returning to normal view shortly...</p>
            </div>
        </div>
    </div>

    <script type="module">
        // --- CONFIGURATION ---
        const GOOGLE_CLIENT_ID = '415018106195-utjkai9r1ar3pd6ep5f06kt5ma0tfg0k.apps.googleusercontent.com';
        const GOOGLE_API_KEY = 'AIzaSyA-Gqmhu3nG6jAPE8VFyzWv5Ppdbf1Ot8k';
        const OPENWEATHER_API_KEY = 'e59fe270071be5ed24b5a1ec85ef84c3';
        const OPENAI_API_KEY = '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';
        const VIEW_DEFINITIONS = [
            { id: 'quick-look-view', name: 'Quick Look' },
            { id: 'monthly-view', name: 'Monthly' },
            { id: 'weekly-view', name: 'Weekly' },
            { id: 'dense-view', name: 'Dense' },
        ];
        
        // --- STATE ---
        let settings = {};
        let activeViewId = 'quick-look-view';
        let previousViewId = 'quick-look-view';
        let viewInterval;
        let realtimePollingInterval;
        let tokenClient;
        let gapiInited = false;
        let currentWeatherData = {};
        let currentEvents = [];
        let calendarColors = {};
        let controlsHideTimeout;
        let debugMode = { time: null, weather: null };

        // --- DOM Elements ---
        const mainContainer = document.getElementById('main-container');
        const loadingScreen = document.getElementById('loading-screen');
        const progressBar = document.getElementById('progress-bar');
        const loadingMessage = document.getElementById('loading-message');
        const authScreen = document.getElementById('auth-screen');
        const authorizeButton = document.getElementById('authorize-button');
        const toggleControlsBtn = document.getElementById('toggle-controls-btn');
        const settingsPanel = document.getElementById('settings-panel');
        const headerControls = document.getElementById('header-controls');
        const calendarSelector = document.getElementById('calendar-selector');
        const monthSelector = document.getElementById('month-selector');
        const viewSelector = document.getElementById('view-selector');
        const weatherBg = document.getElementById('weather-bg');
        const debugTimeInput = document.getElementById('debug-time');
        const debugWeatherInput = document.getElementById('debug-weather');

        // --- CORE LOGIC ---
        function initializeApp() {
            loadSettings();
            setupEventListeners();
            updateTimeAndDate();
            setInterval(updateTimeAndDate, 1000 * 60); 
            gapi.load('client', initializeGapiClient);
            showControlsTemporarily();
        }
        
        function updateProgress(value, message) {
            progressBar.style.width = `${value}%`;
            loadingMessage.textContent = message;
        }

        function setupEventListeners() {
            document.body.addEventListener('mousemove', showControlsTemporarily);
            toggleControlsBtn.addEventListener('click', () => settingsPanel.classList.toggle('hidden'));
            settingsPanel.addEventListener('change', handleSettingsChange);
            calendarSelector.addEventListener('change', () => {
                settings.lastCalendarId = calendarSelector.value;
                saveSettings();
                refreshAllData();
            });
            monthSelector.addEventListener('change', refreshAllData);
            viewSelector.addEventListener('change', (e) => switchView(e.target.value, true));
            debugTimeInput.addEventListener('change', (e) => {
                debugMode.time = e.target.value;
                updateTimeAndDate();
            });
            debugWeatherInput.addEventListener('change', (e) => {
                debugMode.weather = e.target.value;
                updateWeatherEffects();
            });
        }

        function showControlsTemporarily() {
            toggleControlsBtn.style.opacity = '1';
            clearTimeout(controlsHideTimeout);
            controlsHideTimeout = setTimeout(() => {
                if (!settingsPanel.matches(':hover') && !headerControls.matches(':hover')) {
                     toggleControlsBtn.style.opacity = '0';
                }
            }, 3000);
        }

        // --- SETTINGS MANAGEMENT ---
        function loadSettings() {
            const savedSettings = localStorage.getItem('dynamicDisplaySettings');
            const defaultSettings = {
                lastCalendarId: null,
                cycleViews: ['quick-look-view', 'monthly-view'],
                nightStart: '22:00',
                nightEnd: '05:00',
            };
            settings = savedSettings ? JSON.parse(savedSettings) : defaultSettings;
            
            const cycleOptionsContainer = document.getElementById('cycle-views-options');
            cycleOptionsContainer.innerHTML = '';
            VIEW_DEFINITIONS.forEach(view => {
                 const isChecked = settings.cycleViews.includes(view.id);
                 cycleOptionsContainer.innerHTML += `<label class="flex items-center gap-2"><input type="checkbox" data-viewid="${view.id}" class="cycle-view-checkbox bg-gray-700/50" ${isChecked ? 'checked' : ''}>${view.name}</label>`;
            });
            document.getElementById('night-start-time').value = settings.nightStart;
            document.getElementById('night-end-time').value = settings.nightEnd;
        }

        function saveSettings() {
            localStorage.setItem('dynamicDisplaySettings', JSON.stringify(settings));
        }

        function handleSettingsChange(e) {
            if (e.target.classList.contains('cycle-view-checkbox')) {
                const viewId = e.target.dataset.viewid;
                if (e.target.checked) {
                    if (!settings.cycleViews.includes(viewId)) settings.cycleViews.push(viewId);
                } else {
                    settings.cycleViews = settings.cycleViews.filter(id => id !== viewId);
                }
            }
            if (e.target.id === 'night-start-time') settings.nightStart = e.target.value;
            if (e.target.id === 'night-end-time') settings.nightEnd = e.target.value;
            
            saveSettings();
            updateTimeAndDate(); // Re-check night mode
            switchView(activeViewId, true); // Re-initialize view cycling with new settings
        }
        
        // --- TIME, DATE & THEME ---
        function getDynamicTheme(hour) {
            if (hour >= 5 && hour < 7) return { bg: 'linear-gradient(to bottom, #3a5a8a, #f7b733)', text: '#FFFFFF' }; // Sunrise
            if (hour >= 7 && hour < 17) return { bg: 'linear-gradient(to bottom, #87CEEB, #4682B4)', text: '#000000' }; // Day
            if (hour >= 17 && hour < 19) return { bg: 'linear-gradient(to bottom, #ff7e5f, #feb47b)', text: '#FFFFFF' }; // Sunset
            if (hour >= 19 && hour < 22) return { bg: 'linear-gradient(to bottom, #0f172a, #3a5a8a)', text: '#FFFFFF' }; // Evening
            return { bg: 'linear-gradient(to bottom, #0c0a09, #1e293b)', text: '#FFFFFF' }; // Night
        }

        function updateTimeAndDate() {
            const now = new Date();
            if (debugMode.time) {
                const [h, m] = debugMode.time.split(':');
                now.setHours(h, m, 0, 0);
            }
            const hours = now.getHours();
            
            const [startH] = settings.nightStart.split(':').map(Number);
            const [endH] = settings.nightEnd.split(':').map(Number);
            let isNight;
            if (startH > endH) { // Overnight case (e.g., 22:00 to 05:00)
                isNight = hours >= startH || hours < endH;
            } else { // Same-day case (e.g., 01:00 to 05:00)
                isNight = hours >= startH && hours < endH;
            }
            
            const theme = getDynamicTheme(hours);
            weatherBg.style.background = theme.bg;
            mainContainer.style.color = theme.text;
            
            const timeString = now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', hour12: true });
            const dateString = now.toLocaleDateString([], { day: 'numeric', month: 'long' });
            
            document.getElementById('quick-time').textContent = timeString;
            document.getElementById('quick-date').textContent = dateString;
            document.getElementById('night-time').textContent = timeString;
            document.getElementById('night-date').textContent = dateString;
            
            if (isNight && activeViewId !== 'night-view' && activeViewId !== 'new-event-view') {
                switchView('night-view');
            } else if (!isNight && activeViewId === 'night-view') {
                 switchView(previousViewId || settings.cycleViews[0] || 'quick-look-view');
            }
        }

        // --- VIEW MANAGEMENT ---
        function switchView(viewId, manualSwitch = false) {
            clearInterval(viewInterval);
            if (activeViewId !== 'night-view' && activeViewId !== 'new-event-view') {
                previousViewId = activeViewId;
            }

            if (settings.cycleViews.length > 1 && settings.cycleViews.includes(viewId) && !manualSwitch) {
                viewInterval = setInterval(() => {
                    if (document.hidden) return;
                    const currentIndex = settings.cycleViews.indexOf(activeViewId);
                    const nextIndex = (currentIndex + 1) % settings.cycleViews.length;
                    switchView(settings.cycleViews[nextIndex]);
                }, 30000);
            }
            
            if (['monthly-view', 'dense-view'].includes(viewId)) {
                monthSelector.classList.remove('hidden');
            } else {
                monthSelector.classList.add('hidden');
            }

            activeViewId = viewId;
            document.querySelectorAll('.view').forEach(v => v.classList.remove('active'));
            document.getElementById(viewId)?.classList.add('active');

            if (manualSwitch) {
                viewSelector.value = viewId;
            }
        }
        
        // --- RENDERING VIEWS ---
        function renderAllViews() {
            renderQuickLook();
            renderMonthlyView();
            renderDenseView();
            renderWeeklyView();
        }

        function getContrastColor(hex) {
            if (!hex) return '#FFFFFF';
            const r = parseInt(hex.substr(1, 2), 16);
            const g = parseInt(hex.substr(3, 2), 16);
            const b = parseInt(hex.substr(5, 2), 16);
            const yiq = ((r * 299) + (g * 587) + (b * 114)) / 1000;
            return (yiq >= 128) ? '#000000' : '#FFFFFF';
        }
        
        function renderWeeklyView() {
            const weeklyBody = document.getElementById('weekly-body');
            weeklyBody.innerHTML = '';
            const today = new Date();
            const startOfWeek = new Date(today.setDate(today.getDate() - today.getDay()));

            for (let i = 0; i < 7; i++) {
                const day = new Date(startOfWeek);
                day.setDate(startOfWeek.getDate() + i);
                const dayEvents = currentEvents.filter(e => new Date(e.start.dateTime || e.start.date).toDateString() === day.toDateString());
                
                let dayHtml = `<div class="p-2 rounded-lg bg-black/10">
                                <h3 class="font-bold text-lg border-b border-white/20 pb-1 mb-2">${day.toLocaleDateString([], { weekday: 'long', month: 'short', day: 'numeric' })}</h3>`;
                
                if (dayEvents.length > 0) {
                    dayEvents.sort((a,b) => new Date(a.start.dateTime || 0) - new Date(b.start.dateTime || 0)).forEach(e => {
                        const time = e.start.dateTime ? new Date(e.start.dateTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) : 'All Day';
                        dayHtml += `<div class="flex items-start gap-2 text-sm ml-2"><p class="w-20 font-semibold">${time}</p><p class="flex-1">${e.summary}</p></div>`;
                    });
                } else {
                    dayHtml += `<p class="text-sm ml-2 opacity-60">No events</p>`;
                }
                dayHtml += `</div>`;
                weeklyBody.innerHTML += dayHtml;
            }
        }

        function renderQuickLook() {
            const eventsContainer = document.getElementById('events-container');
            const now = new Date();
            const upcomingEvents = currentEvents
                .filter(e => new Date(e.start.dateTime || e.start.date) >= now)
                .slice(0, 2);

            eventsContainer.innerHTML = '';
            if (upcomingEvents.length === 0) {
                 eventsContainer.innerHTML = '<p class="text-xl">No upcoming events this month.</p>';
                 return;
            }
            upcomingEvents.forEach((event, index) => {
                 const { summary, start } = event;
                 const startDate = new Date(start.dateTime || start.date);
                 const diffDays = Math.ceil((new Date(startDate).setHours(0,0,0,0) - new Date().setHours(0,0,0,0)) / (1000 * 60 * 60 * 24));
                 let relativeTime = `in ${diffDays} days`;
                 if (diffDays === 0) relativeTime = 'Today';
                 if (diffDays === 1) relativeTime = 'Tomorrow';


                 const eventEl = document.createElement('div');
                 if (index === 0) {
                     eventEl.innerHTML = `<p class="text-xl">${startDate.toLocaleDateString([], {day: 'numeric', month: 'long' })}</p>
                                          <h2 class="text-4xl lg:text-5xl font-bold truncate">${summary}</h2>
                                          <p class="text-2xl">${relativeTime}</p>
                                          <hr class="mt-4 border-t-2 w-1/3">`;
                 } else {
                      eventEl.innerHTML = `<p class="text-lg">${startDate.toLocaleDateString([], {day: 'numeric', month: 'long' })}</p>
                                           <h2 class="text-3xl lg:text-4xl font-semibold truncate">${summary}</h2>
                                           <p class="text-xl">${relativeTime}</p>`;
                 }
                 eventsContainer.appendChild(eventEl);
            });
        }
        
        function renderMonthlyView(dense = false) {
            const bodyId = dense ? 'dense-calendar-body' : 'calendar-body';
            const titleId = dense ? 'dense-calendar-title' : 'calendar-title';
            const dayClass = dense ? 'dense-day' : '';

            const calendarBodyEl = document.getElementById(bodyId);
            const titleEl = document.getElementById(titleId);

            const year = new Date().getFullYear();
            const month = parseInt(monthSelector.value);
            
            titleEl.textContent = new Date(year, month).toLocaleDateString([], { month: 'long', year: 'numeric' });
            calendarBodyEl.innerHTML = '';

            const firstDay = new Date(year, month, 1).getDay();
            const daysInMonth = new Date(year, month + 1, 0).getDate();

            for (let i = 0; i < firstDay; i++) {
                calendarBodyEl.innerHTML += `<div class="calendar-day other-month p-2"></div>`;
            }

            for (let day = 1; day <= daysInMonth; day++) {
                const dayEvents = currentEvents.filter(e => new Date(e.start.dateTime || e.start.date).getDate() === day);
                let dayHtml = `<div class="calendar-day p-2 overflow-hidden ${dayClass} ${new Date().getDate() === day && new Date().getMonth() === month ? 'bg-blue-800/50' : ''}">
                                <div class="font-semibold text-right">${day}</div>
                                <div class="text-xs space-y-1 mt-1 flex-grow overflow-y-auto">`;
                
                if (dense) {
                    dayEvents.forEach(e => {
                         const bgColor = calendarColors[e.organizer.email] || '#4a5568';
                         const textColor = getContrastColor(bgColor);
                         dayHtml += `<div class="p-1 rounded mb-1 text-left" style="background-color: ${bgColor}; color: ${textColor};">
                                        <p class="font-bold truncate">${e.summary}</p>
                                        <p class="truncate opacity-80 text-[10px]" style="color: ${textColor};">${e.description || ''}</p>
                                        <p class="truncate opacity-80 text-[10px]" style="color: ${textColor};"><strong>By:</strong> ${e.creator.displayName || e.creator.email}</p>
                                     </div>`;
                    });
                } else {
                    dayEvents.forEach(e => {
                        const bgColor = calendarColors[calendarSelector.value] || '#0369a1';
                        const textColor = getContrastColor(bgColor);
                        dayHtml += `<div class="rounded px-1 truncate" style="background-color: ${bgColor}; color: ${textColor};">${e.summary}</div>`;
                    });
                }

                dayHtml += `</div></div>`;
                calendarBodyEl.innerHTML += dayHtml;
            }
        }
        
        function renderDenseView() { renderMonthlyView(true); }

        // --- EXTERNAL APIS (Weather, Quotes) ---
        async function fetchWeatherAndQuote() {
             if (!navigator.geolocation) return;
             navigator.geolocation.getCurrentPosition(async (position) => {
                const { latitude, longitude } = position.coords;
                const url = `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${OPENWEATHER_API_KEY}&units=imperial`;
                try {
                    const response = await fetch(url);
                    const data = await response.json();
                    currentWeatherData = {
                        temp: `${Math.round(data.main.temp)}°F`,
                        main: data.weather[0].main,
                        description: data.weather[0].description
                    };
                    updateWeatherUI();
                    updateWeatherEffects();
                    fetchAIQuote();
                } catch(err) { console.error("Error fetching weather:", err); }
            }, (error) => {
                console.error("Geolocation error:", error);
                fetchAIQuote(); // Fetch quote even if weather fails
            });
        }
        
        function updateWeatherUI() {
            const emoji = getWeatherEmoji(currentWeatherData.main);
            document.getElementById('quick-temp').textContent = currentWeatherData.temp || '--°F';
            document.getElementById('quick-weather-emoji').textContent = emoji;
            document.getElementById('night-temp').textContent = currentWeatherData.temp || '--°F';
            document.getElementById('night-weather-emoji').textContent = emoji;
        }

        function updateWeatherEffects() {
            let isNight = false;
            const hours = debugMode.time ? parseInt(debugMode.time.split(':')[0]) : new Date().getHours();
            const [startH] = settings.nightStart.split(':').map(Number);
            const [endH] = settings.nightEnd.split(':').map(Number);
            if (startH > endH) { isNight = hours >= startH || hours < endH; } 
            else { isNight = hours >= startH && hours < endH; }

            const weatherType = (debugMode.weather || currentWeatherData.main || 'clear').toLowerCase();
            
            const oldEffects = weatherBg.querySelectorAll('.raindrop, .star, .cloud');
            oldEffects.forEach(el => el.remove());
            
            let cloudCount = 0;
            let cloudColor = isNight ? 'rgba(51, 65, 85, 0.2)' : 'rgba(255, 255, 255, 0.15)';

            switch (weatherType) {
                case 'clouds': cloudCount = 7; break;
                case 'rain': case 'drizzle':
                    cloudCount = 12;
                    cloudColor = isNight ? 'rgba(30, 41, 59, 0.4)' : 'rgba(100, 116, 139, 0.3)';
                    break;
                case 'thunderstorm':
                    cloudCount = 15;
                    cloudColor = isNight ? 'rgba(15, 23, 42, 0.6)' : 'rgba(51, 65, 85, 0.5)';
                    break;
                case 'clear': cloudCount = 2; break;
            }
            for (let i = 0; i < cloudCount; i++) addEffect('cloud', { color: cloudColor, weather: weatherType });
            
            if (['rain', 'drizzle', 'thunderstorm'].includes(weatherType)) {
                for(let i=0; i<50; i++) addEffect('raindrop');
            } else if (isNight && weatherType === 'clear') {
                for(let i=0; i<100; i++) addEffect('star');
            }
        }

        function addEffect(type, options = {}) {
            const el = document.createElement('div');
            el.className = type;
            el.style.left = `${Math.random() * 100}vw`;
            const delay = Math.random() * 5;
            el.style.animationDelay = `${delay}s`;

            if (type === 'cloud') {
                el.style.setProperty('--cloud-color', options.color);
                el.style.top = `${Math.random() * 40}vh`;
                el.style.transform = `scale(${0.5 + Math.random() * 0.8})`;
                el.style.opacity = (options.weather === 'clear' ? 0.3 : 0.4) + Math.random() * 0.5;
                el.style.animationDuration = `${60 + Math.random() * 80}s`;
            } else if (type === 'raindrop') {
                 el.style.animationDuration = `${0.5 + Math.random() * 0.5}s`;
                 el.style.animationDelay = `${Math.random() * 2}s`;
            } else if (type === 'star') {
                el.style.top = `${Math.random() * 100}vh`;
                el.style.animationDuration = `${1.5 + Math.random() * 2}s`;
            }
            weatherBg.appendChild(el);
        }

        function getWeatherEmoji(weather) {
            const map = { Clear: '☀️', Clouds: '☁️', Rain: '🌧️', Drizzle: '💧', Thunderstorm: '⛈️', Snow: '❄️' };
            return map[weather] || '🌫️'; // Default for mist, fog etc.
        }
        
        async function fetchAIQuote() {
            const prompt = `Generate a short, insightful, one-sentence quote. The time is ${new Date().toLocaleTimeString()}, weather is ${currentWeatherData.description || 'clear'}. My next event is: ${currentEvents[0]?.summary || 'nothing'}. Keep it generic but inspired.`;
            try {
                const response = await fetch("https://api.openai.com/v1/chat/completions", {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${OPENAI_API_KEY}` },
                    body: JSON.stringify({ model: "gpt-3.5-turbo", messages: [{ role: "user", content: prompt }], temperature: 0.7, max_tokens: 40 })
                });
                if (!response.ok) {
                    const errorBody = await response.json();
                    throw new Error(`OpenAI API Error: ${errorBody.error.message}`);
                }
                const data = await response.json();
                let quote = data.choices[0].message.content.trim().replace(/^"|"$/g, '');
                document.getElementById('quote-container').textContent = `"${quote}"`;
            } catch (err) {
                console.error("Error fetching AI quote:", err);
                document.getElementById('quote-container').textContent = `"The future belongs to those who believe in the beauty of their dreams."`;
            }
        }

        // --- GOOGLE API & AUTH ---
        async function initializeGapiClient() {
            updateProgress(10, 'Initializing Google Services...');
            try {
                await gapi.client.init({ apiKey: GOOGLE_API_KEY, discoveryDocs: ["https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest"] });
                gapiInited = true;
                tokenClient = google.accounts.oauth2.initTokenClient({
                    client_id: GOOGLE_CLIENT_ID,
                    scope: 'https://www.googleapis.com/auth/calendar.readonly https://www.googleapis.com/auth/calendar.events.readonly',
                    callback: handleTokenResponse,
                });
                
                const storedToken = localStorage.getItem('googleOauthToken');
                if (storedToken) {
                    const token = JSON.parse(storedToken);
                    if (token.expires_at > Date.now()) {
                        gapi.client.setToken(token);
                        await handleSuccessfulLogin();
                    } else {
                        localStorage.removeItem('googleOauthToken');
                        authScreen.classList.remove('hidden');
                    }
                } else {
                    authScreen.classList.remove('hidden');
                }
            } catch (err) { console.error("GAPI/Token Client Error:", err); }
            authorizeButton.disabled = false;
            authorizeButton.textContent = 'Connect Google Calendar';
        }
        
        function handleTokenResponse(resp) {
            if (resp.error) throw resp;
            const token = gapi.client.getToken();
            token.expires_at = Date.now() + (parseInt(token.expires_in, 10) * 1000);
            localStorage.setItem('googleOauthToken', JSON.stringify(token));
            handleSuccessfulLogin();
        }

        async function handleSuccessfulLogin() {
            authScreen.classList.add('hidden');
            updateProgress(25, 'Fetching calendar list...');
            await loadCalendarList();
            updateProgress(50, 'Getting latest events...');
            await refreshAllData();
            updateProgress(75, 'Checking the weather...');
            await fetchWeatherAndQuote();
            updateProgress(100, 'Done!');
            
            startRealtimePolling();
            setTimeout(() => {
                loadingScreen.style.opacity = '0';
                setTimeout(() => loadingScreen.classList.add('hidden'), 500);
            }, 500);
            headerControls.classList.remove('hidden');
            switchView(settings.cycleViews[0] || 'quick-look-view');
        }
        
        authorizeButton.addEventListener('click', () => {
             if (!gapiInited) return;
             if (gapi.client.getToken() === null) {
                tokenClient.requestAccessToken({prompt: 'consent'});
            } else {
                tokenClient.requestAccessToken({prompt: ''});
            }
        });

        async function refreshAllData() {
            await fetchEventsForMonth();
            renderAllViews();
        }

        async function loadCalendarList() {
            try {
                const response = await gapi.client.calendar.calendarList.list();
                calendarSelector.innerHTML = '';
                VIEW_DEFINITIONS.forEach(view => {
                    const option = document.createElement('option');
                    option.value = view.id;
                    option.textContent = view.name;
                    viewSelector.appendChild(option);
                });
                
                response.result.items.forEach(cal => {
                    const option = document.createElement('option');
                    option.value = cal.id;
                    option.textContent = cal.summary;
                    if (cal.primary && !settings.lastCalendarId) option.selected = true;
                    calendarSelector.appendChild(option);
                    calendarColors[cal.id] = cal.backgroundColor;
                });
                
                if(settings.lastCalendarId) {
                    calendarSelector.value = settings.lastCalendarId;
                }
            } catch (err) { console.error("Error loading calendar list:", err); }
        }

        async function fetchEventsForMonth(isPoll = false) {
            const calendarId = calendarSelector.value;
            if (!calendarId) return isPoll ? [] : (currentEvents = []);
            const selectedMonth = parseInt(monthSelector.value);
            const year = new Date().getFullYear();
            const timeMin = new Date(year, selectedMonth, 1).toISOString();
            const timeMax = new Date(year, selectedMonth + 1, 0).toISOString();

            try {
                const response = await gapi.client.calendar.events.list({
                    'calendarId': calendarId, 'timeMin': timeMin, 'timeMax': timeMax,
                    'showDeleted': false, 'singleEvents': true, 'orderBy': 'startTime'
                });
                const fetchedEvents = response.result.items;
                if(isPoll) return fetchedEvents;
                currentEvents = fetchedEvents;
            } catch(err) {
                 console.error('Error fetching events:', err);
                 if(isPoll) return [];
                 currentEvents = [];
            }
        }

        // --- REAL-TIME & NEW EVENT LOGIC ---
        function startRealtimePolling() {
            if (realtimePollingInterval) clearInterval(realtimePollingInterval);
            realtimePollingInterval = setInterval(checkForUpdates, 60 * 1000);
        }

        async function checkForUpdates() {
            const newEventsList = await fetchEventsForMonth(true);
            const oldEventIds = new Set(currentEvents.map(e => e.id));
            const newEvent = newEventsList.find(e => !oldEventIds.has(e.id));
            
            const needsUpdate = newEventsList.length !== currentEvents.length || JSON.stringify(newEventsList) !== JSON.stringify(currentEvents);

            if (needsUpdate) {
                currentEvents = newEventsList;
                renderAllViews();
                
                if (newEvent) {
                    showNewEventScreen(newEvent);
                }
            }
        }

        function showNewEventScreen(event) {
            const titleEl = document.getElementById('new-event-title');
            const timeEl = document.getElementById('new-event-time');
            const startDate = new Date(event.start.dateTime || event.start.date);
            
            titleEl.textContent = event.summary;
            timeEl.textContent = startDate.toLocaleString([], { dateStyle: 'full', timeStyle: 'short' });

            switchView('new-event-view');

            setTimeout(() => {
                if (activeViewId === 'new-event-view') {
                    switchView(previousViewId || 'quick-look-view');
                }
            }, 10 * 60 * 1000);
        }

        // --- INITIALIZATION ---
        window.onload = initializeApp;
    </script>
</body>
</html>

