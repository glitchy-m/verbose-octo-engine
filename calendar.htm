<!DOCTYPE html>
<html lang="en" class="h-full">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dynamic Calendar Display</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <script src="https://apis.google.com/js/api.js"></script>
    <script src="https://accounts.google.com/gsi/client" async defer></script>
    <style>
        /* Custom styles and animations */
        body {
            font-family: 'Inter', sans-serif;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
            transition: color 1.5s ease-in-out;
        }

        /* --- Time-of-Day & Weather Backgrounds --- */
        .weather-bg {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
            transition: background 2s ease-in-out, opacity 1.5s ease-in-out;
            overflow: hidden;
        }

        /* Time of Day Gradients (for clear weather) */
        .bg-clear-morning { background: linear-gradient(to top, #fcd34d, #87CEEB); }
        .bg-clear-afternoon { background: linear-gradient(to bottom, #87CEEB, #4682B4); }
        .bg-clear-evening { background: linear-gradient(to bottom, #4a044e, #1e3a8a, #0c4a6e); }
        .bg-clear-night { background: linear-gradient(to bottom, #0f172a, #0c0a09); }
        
        /* Weather Overlays */
        .weather-clouds-day { background: linear-gradient(to bottom, #B0C4DE, #778899); }
        .weather-clouds-night { background: linear-gradient(to bottom, #334155, #1e293b); }
        .weather-rain-day, .weather-drizzle-day, .weather-thunderstorm-day { background: linear-gradient(to bottom, #465875, #1f2937); }
        .weather-rain-night, .weather-drizzle-night, .weather-thunderstorm-night { background: linear-gradient(to bottom, #1e293b, #0f172a); }
        .weather-snow-day { background: linear-gradient(to bottom, #e0e0e0, #a0a0a0); }
        .weather-snow-night { background: linear-gradient(to bottom, #64748b, #334155); }
        
        /* Night Mode Override */
        .night-mode-custom-bg { /* Style will be set by JS */ }

        /* Weather Effects */
        .raindrop, .star, .cloud {
            position: absolute;
            opacity: 0;
            animation-duration: 2s;
            animation-timing-function: linear;
            animation-iteration-count: infinite;
        }
        .raindrop { width: 2px; height: 15px; background: linear-gradient(to bottom, rgba(255,255,255,0), rgba(255,255,255,0.4)); animation-name: fall; }
        @keyframes fall { 0% { transform: translateY(-10vh); opacity: 1; } 100% { transform: translateY(110vh); opacity: 1; } }
        .star { width: 2px; height: 2px; background-color: white; border-radius: 50%; animation-name: twinkle; }
        @keyframes twinkle { 0%, 100% { opacity: 0; } 50% { opacity: 0.8; } }
        .cloud { width: 200px; height: 60px; background: var(--cloud-color); border-radius: 100px; animation-name: move-cloud; will-change: transform, opacity; }
        .cloud::before, .cloud::after { content: ''; position: absolute; background: var(--cloud-color); border-radius: 50%; }
        .cloud::before { width: 100px; height: 80px; top: -40px; left: 20px; }
        .cloud::after { width: 120px; height: 60px; top: -30px; right: 30px; }
        @keyframes move-cloud { 0% { transform: translateX(-250px) translateZ(0); } 100% { transform: translateX(110vw) translateZ(0); } }

        /* General UI */
        .view { display: none; animation: fadeIn 0.8s ease-in-out; opacity: 0; will-change: opacity; }
        .view.active { display: flex; opacity: 1; }
        @keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } }
        .calendar-grid { display: grid; grid-template-columns: repeat(7, 1fr); gap: 1px; }
        .calendar-day, .calendar-header { backdrop-filter: blur(10px); -webkit-backdrop-filter: blur(10px); }
        .calendar-day { min-height: 10vh; }
        .calendar-day.other-month { opacity: 0.4; }
        .dense-day { min-height: 18vh; display: flex; flex-direction: column; }
        .new-event-alert { animation: pulse-border 2s infinite; }
        @keyframes pulse-border { 0%, 100% { border-color: #f59e0b; } 50% { border-color: #fcd34d; } }
        #progress-bar { transition: width 0.5s ease-out; }

        /* Light/Dark theme text */
        body.light-theme { color: #1f2937; }
        body.dark-theme { color: #f3f4f6; }
        body.light-theme .calendar-grid { background-color: rgba(0, 0, 0, 0.1); border: 1px solid rgba(0, 0, 0, 0.1); }
        body.dark-theme .calendar-grid { background-color: rgba(255, 255, 255, 0.2); border: 1px solid rgba(255, 255, 255, 0.2); }
        body.light-theme .calendar-day, body.light-theme .calendar-header { background-color: rgba(255, 255, 255, 0.4); }
        body.dark-theme .calendar-day, body.dark-theme .calendar-header { background-color: rgba(17, 24, 39, 0.5); }
        body.light-theme #quote-container { color: #374151; }
        body.dark-theme #quote-container { color: #d1d5db; }
    </style>
</head>
<body class="h-full bg-gray-900 overflow-hidden dark-theme">
    <!-- Weather Background -->
    <div id="weather-bg" class="weather-bg"></div>

    <!-- Main Container -->
    <div class="relative flex flex-col h-full p-4 sm:p-6 md:p-8 lg:p-12">
        
        <!-- Loading & Auth Screens -->
        <div id="loading-screen" class="absolute inset-0 z-50 flex flex-col items-center justify-center bg-gray-900/90 backdrop-blur-sm transition-opacity duration-500">
            <div class="w-full max-w-md text-center">
                <h1 class="text-3xl font-bold mb-4 text-white">Initializing Display...</h1>
                <div class="w-full bg-gray-700 rounded-full h-2.5 mb-2"><div id="progress-bar" class="bg-blue-600 h-2.5 rounded-full" style="width: 0%"></div></div>
                <p id="loading-message" class="text-gray-300">Getting things ready...</p>
            </div>
        </div>
        <div id="auth-screen" class="absolute inset-0 z-40 flex items-center justify-center bg-gray-900/80 backdrop-blur-md hidden">
            <div class="text-center">
                <h1 class="text-3xl font-bold mb-4 text-white">Welcome</h1>
                <p id="auth-message" class="mb-6 text-gray-300">Please connect your Google Calendar to see your events.</p>
                <button id="authorize-button" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg transition-colors disabled:bg-gray-500" disabled>Initializing...</button>
            </div>
        </div>

        <!-- Settings Button -->
        <button id="settings-btn" class="absolute top-4 left-4 z-50 p-2 bg-gray-800/50 rounded-full hover:bg-gray-700/70 transition-opacity duration-500">
             <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="opacity-75 text-white"><circle cx="12" cy="12" r="3"></circle><path d="M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z"></path></svg>
        </button>

        <!-- Settings Modal -->
        <div id="settings-modal" class="absolute inset-0 z-40 bg-gray-900/80 backdrop-blur-md p-8 hidden items-center justify-center">
            <div class="bg-gray-800/80 text-white p-6 rounded-lg max-w-2xl w-full space-y-6 relative">
                 <button id="close-settings-btn" class="absolute top-4 right-4 text-gray-400 hover:text-white">&times;</button>
                 <h2 class="text-2xl font-bold border-b border-gray-600 pb-2">Settings</h2>
                 
                 <!-- General Settings -->
                 <div class="space-y-2">
                     <label for="calendar-selector" class="font-semibold">Active Calendar:</label>
                     <select id="calendar-selector" class="w-full bg-gray-700 rounded-md p-2 border border-gray-600"></select>
                 </div>
                 
                 <!-- View Settings -->
                 <div class="space-y-2">
                     <p class="font-semibold">View Controls</p>
                     <label for="view-selector">Default View:</label>
                     <select id="view-selector" class="bg-gray-700 text-white rounded-md p-2 border border-gray-600">
                         <option value="quick-look-view">Quick Look</option>
                         <option value="monthly-view">Monthly</option>
                         <option value="dense-view">Dense</option>
                         <option value="weekly-view">Weekly</option>
                         <option value="agenda-view">Agenda</option>
                     </select>
                     <p class="font-semibold pt-2">Automatic View Cycle:</p>
                     <div id="view-cycle-options" class="grid grid-cols-2 gap-2">
                         <!-- Checkboxes will be inserted here by JS -->
                     </div>
                 </div>

                 <!-- Night Mode Settings -->
                 <div class="space-y-3">
                     <p class="font-semibold">Night Mode</p>
                     <div class="flex items-center gap-4">
                        <label for="night-mode-start">Start Time:</label>
                        <input type="time" id="night-mode-start" class="bg-gray-700 rounded p-1">
                        <label for="night-mode-end">End Time:</label>
                        <input type="time" id="night-mode-end" class="bg-gray-700 rounded p-1">
                     </div>
                     <div class="flex items-center gap-4">
                        <label for="night-mode-theme">Theme:</label>
                        <select id="night-mode-theme" class="bg-gray-700 rounded p-1">
                            <option value="default">Default Dark</option>
                            <option value="custom">Custom Color</option>
                        </select>
                        <input type="color" id="night-mode-color" class="bg-gray-700" value="#0f172a">
                     </div>
                 </div>

                <!-- Debug Controls -->
                <details>
                    <summary class="font-semibold cursor-pointer">Debug Controls</summary>
                    <div id="debug-panel" class="bg-gray-900/50 p-4 rounded-lg space-y-3 mt-2">
                        <div><label for="debug-time" class="block text-sm font-medium">Override Time</label><input type="time" id="debug-time" class="w-full bg-gray-700 rounded-md p-1 border border-gray-600"></div>
                        <div>
                            <label for="debug-weather" class="block text-sm font-medium">Override Weather</label>
                            <select id="debug-weather" class="w-full bg-gray-700 rounded-md p-1 border border-gray-600">
                                <option value="">Live Weather</option><option value="Clear">Clear</option><option value="Clouds">Clouds</option><option value="Rain">Rain</option><option value="Drizzle">Drizzle</option><option value="Thunderstorm">Thunderstorm</option><option value="Snow">Snow</option>
                            </select>
                        </div>
                    </div>
                </details>

            </div>
        </div>

        <!-- Header -->
        <div id="header-info" class="absolute top-4 right-4 z-30 text-right">
            <select id="month-selector" class="bg-gray-800/50 rounded-md p-2 border border-gray-600 hidden"></select>
        </div>


        <!-- Views -->
        <div id="quick-look-view" class="view flex-col justify-between h-full w-full">
            <div class="flex justify-between items-start">
                <div>
                    <div id="quick-time" class="text-6xl md:text-8xl lg:text-9xl font-bold tracking-tight"></div>
                    <div id="quick-date" class="text-3xl md:text-4xl lg:text-5xl font-medium opacity-80"></div>
                </div>
                <div id="quick-weather" class="text-right">
                    <div class="flex items-center justify-end gap-4">
                        <div id="quick-weather-emoji" class="text-5xl md:text-6xl"></div>
                        <div id="quick-temp" class="text-3xl md:text-5xl font-semibold"></div>
                    </div>
                </div>
            </div>
            <div class="flex-grow flex items-center justify-center">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-8 lg:gap-16 w-full max-w-6xl">
                    <div id="events-container" class="space-y-6"></div>
                    <div class="flex items-center">
                         <blockquote id="quote-container" class="text-2xl md:text-3xl lg:text-4xl font-light italic">"..."</blockquote>
                    </div>
                </div>
            </div>
        </div>

        <div id="monthly-view" class="view flex-col h-full w-full">
            <h1 id="calendar-title" class="text-4xl md:text-5xl font-bold mb-4"></h1>
            <div id="calendar-header" class="calendar-grid">
                <!-- Headers inserted by JS -->
            </div>
            <div id="calendar-body" class="calendar-grid flex-grow"></div>
        </div>
        
        <div id="dense-view" class="view flex-col h-full w-full">
            <h1 id="dense-calendar-title" class="text-4xl md:text-5xl font-bold mb-4"></h1>
            <div id="dense-calendar-header" class="calendar-grid">
                 <!-- Headers inserted by JS -->
            </div>
            <div id="dense-calendar-body" class="calendar-grid flex-grow"></div>
        </div>

        <div id="weekly-view" class="view flex-col h-full w-full">
            <h1 id="weekly-title" class="text-4xl md:text-5xl font-bold mb-4">This Week</h1>
            <div id="weekly-header" class="calendar-grid">
                <!-- Headers inserted by JS -->
            </div>
            <div id="weekly-body" class="calendar-grid flex-grow"></div>
        </div>

        <div id="agenda-view" class="view flex-col h-full w-full">
            <h1 class="text-4xl md:text-5xl font-bold mb-6">Upcoming Agenda</h1>
            <div id="agenda-body" class="space-y-4 overflow-y-auto pr-4">
                <!-- Agenda items inserted by JS -->
            </div>
        </div>

        <div id="night-view" class="view flex-col justify-center items-center h-full w-full text-center">
             <div id="night-time" class="text-7xl md:text-9xl font-bold tracking-tight"></div>
             <div id="night-date" class="text-4xl md:text-6xl font-medium opacity-80"></div>
             <div id="night-weather" class="flex items-center justify-center gap-4 mt-8">
                <div id="night-weather-emoji" class="text-4xl"></div>
                <div id="night-temp" class="text-2xl md:text-3xl font-semibold"></div>
            </div>
        </div>

        <div id="new-event-view" class="view flex-col justify-center items-center h-full w-full text-center">
            <div class="p-8 rounded-lg border-4 border-amber-400 bg-gray-900/70 backdrop-blur-xl max-w-3xl new-event-alert">
                <h2 class="text-3xl font-bold text-amber-300 mb-4">🚨 NEW EVENT ADDED 🚨</h2>
                <p id="new-event-title" class="text-6xl font-bold mb-2"></p>
                <p id="new-event-time" class="text-4xl opacity-80"></p>
                <p class="text-lg opacity-70 mt-6">Returning to normal view shortly...</p>
            </div>
        </div>
    </div>

    <script type="module">
        // --- CONFIGURATION ---
        const GOOGLE_CLIENT_ID = '415018106195-utjkai9r1ar3pd6ep5f06kt5ma0tfg0k.apps.googleusercontent.com';
        const GOOGLE_API_KEY = 'AIzaSyA-Gqmhu3nG6jAPE8VFyzWv5Ppdbf1Ot8k'; // NOTE: Exposing API keys client-side is risky. Use a backend proxy for production.
        const OPENWEATHER_API_KEY = 'e59fe270071be5ed24b5a1ec85ef84c3';
        const OPENAI_API_KEY = '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';

        // --- STATE ---
        let gapiInited = false;
        let activeViewId = 'quick-look-view';
        let previousViewId = 'quick-look-view';
        let viewInterval;
        let realtimePollingInterval;
        let tokenClient;
        let currentWeatherData = {};
        let currentEvents = [];
        let calendarColors = {};
        let inactivityTimer;
        let debugMode = { time: null, weather: null };

        let settings = {
            lastCalendarId: null,
            defaultView: 'quick-look-view',
            viewCycle: ['quick-look-view', 'monthly-view'],
            nightMode: {
                start: '22:00',
                end: '05:00',
                theme: 'default',
                color: '#0f172a'
            }
        };

        const ALL_VIEWS = {
            'quick-look-view': 'Quick Look',
            'monthly-view': 'Monthly',
            'dense-view': 'Dense View',
            'weekly-view': 'Weekly',
            'agenda-view': 'Agenda'
        };

        // --- DOM Elements ---
        const loadingScreen = document.getElementById('loading-screen');
        const progressBar = document.getElementById('progress-bar');
        const loadingMessage = document.getElementById('loading-message');
        const authScreen = document.getElementById('auth-screen');
        const authorizeButton = document.getElementById('authorize-button');
        const calendarSelector = document.getElementById('calendar-selector');
        const monthSelector = document.getElementById('month-selector');
        const viewSelector = document.getElementById('view-selector');
        const weatherBg = document.getElementById('weather-bg');
        const settingsBtn = document.getElementById('settings-btn');
        const settingsModal = document.getElementById('settings-modal');

        // --- COOKIE HELPERS ---
        function setCookie(name, value, days) {
            let expires = "";
            if (days) {
                const date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "") + expires + "; path=/; SameSite=Lax";
        }

        function getCookie(name) {
            const nameEQ = name + "=";
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) == ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }

        // --- SETTINGS MANAGEMENT ---
        function saveSettings() {
            // Update settings object from UI before saving
            settings.lastCalendarId = calendarSelector.value;
            settings.defaultView = viewSelector.value;
            settings.viewCycle = Array.from(document.querySelectorAll('#view-cycle-options input:checked')).map(cb => cb.value);
            settings.nightMode.start = document.getElementById('night-mode-start').value;
            settings.nightMode.end = document.getElementById('night-mode-end').value;
            settings.nightMode.theme = document.getElementById('night-mode-theme').value;
            settings.nightMode.color = document.getElementById('night-mode-color').value;
            setCookie('calendarSettings', JSON.stringify(settings), 365);
        }

        function loadSettings() {
            const savedSettings = getCookie('calendarSettings');
            if (savedSettings) {
                // Merge saved settings with defaults to avoid errors if new settings are added
                const parsed = JSON.parse(savedSettings);
                settings = {
                    ...settings,
                    ...parsed,
                    nightMode: { ...settings.nightMode, ...(parsed.nightMode || {}) }
                };
            }
            applySettingsToUI();
        }
        
        function applySettingsToUI() {
            if (settings.lastCalendarId) calendarSelector.value = settings.lastCalendarId;
            viewSelector.value = settings.defaultView;
            document.getElementById('night-mode-start').value = settings.nightMode.start;
            document.getElementById('night-mode-end').value = settings.nightMode.end;
            document.getElementById('night-mode-theme').value = settings.nightMode.theme;
            document.getElementById('night-mode-color').value = settings.nightMode.color;

            // Apply to view cycle checkboxes
            document.querySelectorAll('#view-cycle-options input').forEach(cb => {
                cb.checked = settings.viewCycle.includes(cb.value);
            });
        }
        
        function populateSettingsControls() {
            const viewCycleContainer = document.getElementById('view-cycle-options');
            viewCycleContainer.innerHTML = '';
            for (const [viewId, viewName] of Object.entries(ALL_VIEWS)) {
                viewCycleContainer.innerHTML += `
                    <div class="flex items-center gap-2">
                        <input type="checkbox" id="cycle-${viewId}" value="${viewId}" class="bg-gray-600 rounded">
                        <label for="cycle-${viewId}">${viewName}</label>
                    </div>`;
            }
        }
        
        // --- CORE LOGIC ---
        function initializeApp() {
            populateSettingsControls();
            loadSettings();
            setupEventListeners();
            setupDebugControls();
            setupInactivityTimer();
            setupCalendarHeaders();
            
            updateTimeAndDate();
            setInterval(updateTimeAndDate, 1000);
            
            gapi.load('client', initializeGapiClient);
        }
        
        function setupEventListeners() {
            settingsBtn.addEventListener('click', () => settingsModal.style.display = 'flex');
            document.getElementById('close-settings-btn').addEventListener('click', () => {
                settingsModal.style.display = 'none';
                saveSettings(); // Save when closing
                // Re-initialize view cycle with new settings
                switchView(activeViewId, true);
            });
            calendarSelector.addEventListener('change', () => {
                saveSettings();
                refreshAllData();
            });
            monthSelector.addEventListener('change', refreshAllData);
            viewSelector.addEventListener('change', (e) => {
                saveSettings();
                switchView(e.target.value, true);
            });
            settingsModal.addEventListener('change', saveSettings); // Auto-save on any change within modal
        }

        function updateLoadingProgress(percent, message) {
            progressBar.style.width = `${percent}%`;
            loadingMessage.textContent = message;
        }

        function setupInactivityTimer() {
            const showSettingsButton = () => {
                settingsBtn.classList.remove('opacity-0', 'pointer-events-none');
                clearTimeout(inactivityTimer);
                inactivityTimer = setTimeout(() => {
                    settingsBtn.classList.add('opacity-0', 'pointer-events-none');
                }, 3000);
            };
            document.addEventListener('mousemove', showSettingsButton);
            document.addEventListener('touchstart', showSettingsButton);
            showSettingsButton(); // Initial call
        }
        
        // --- TIME, DATE & BACKGROUND ---
        function getTimeOfDay() {
            const now = new Date();
            if (debugMode.time !== null) {
                const [hour, minute] = debugMode.time.split(':').map(Number);
                now.setHours(hour, minute || 0);
            }
            const hours = now.getHours();
            const [startHour] = settings.nightMode.start.split(':').map(Number);
            const [endHour] = settings.nightMode.end.split(':').map(Number);

            if (startHour > endHour) { // Handles overnight times like 22:00 to 05:00
                if (hours >= startHour || hours < endHour) return 'night';
            } else { // Handles same-day times like 00:00 to 05:00
                if (hours >= startHour && hours < endHour) return 'night';
            }
            
            if (hours >= 5 && hours < 12) return 'morning';
            if (hours >= 12 && hours < 18) return 'afternoon';
            return 'evening';
        }

        function updateTimeAndDate() {
            const now = new Date();
            if (debugMode.time !== null) {
                const [hour, minute] = debugMode.time.split(':').map(Number);
                now.setHours(hour, minute || 0);
            }

            const timeString = now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', hour12: true });
            const dateString = now.toLocaleDateString([], { weekday: 'long', month: 'long', day: 'numeric' });

            const timeOfDay = getTimeOfDay();
            if (timeOfDay === 'night') {
                if (activeViewId !== 'night-view' && activeViewId !== 'new-event-view') {
                    switchView('night-view');
                }
            } else {
                 if (activeViewId === 'night-view') {
                    switchView(previousViewId || settings.defaultView);
                }
            }
            updateBackground();
            
            document.getElementById('night-time').textContent = timeString;
            document.getElementById('night-date').textContent = dateString;
            document.getElementById('quick-time').textContent = timeString;
            document.getElementById('quick-date').textContent = dateString;
        }

        function updateBackground() {
            const timeOfDay = getTimeOfDay();
            const weatherType = (currentWeatherData.main || 'clear').toLowerCase();
            const body = document.body;

            let bgClass = `bg-clear-${timeOfDay}`;
            if (weatherType !== 'clear') {
                bgClass = `weather-${weatherType}-${timeOfDay === 'night' ? 'night' : 'day'}`;
            }
            
            if (timeOfDay === 'night' && settings.nightMode.theme === 'custom') {
                weatherBg.className = 'weather-bg night-mode-custom-bg';
                weatherBg.style.background = settings.nightMode.color;
            } else {
                 weatherBg.style.background = '';
                 weatherBg.className = 'weather-bg ' + bgClass;
            }

            // Determine if background is light or dark to set text color
            // This is a simplified heuristic. A better method would analyze the computed background color.
            const isDarkBg = timeOfDay === 'night' || timeOfDay === 'evening' || ['rain', 'clouds', 'thunderstorm'].includes(weatherType);
            body.classList.toggle('dark-theme', isDarkBg);
            body.classList.toggle('light-theme', !isDarkBg);
            
            updateWeatherParticles(weatherType, timeOfDay === 'night');
        }

        function updateWeatherParticles(weatherType, isNight) {
            weatherBg.querySelectorAll('.raindrop, .star, .cloud').forEach(el => el.remove());
            
            let cloudCount = 0;
            let cloudColor = isNight ? 'rgba(51, 65, 85, 0.2)' : 'rgba(255, 255, 255, 0.15)';

            switch (weatherType) {
                case 'clouds': cloudCount = 7; break;
                case 'rain': case 'drizzle': cloudCount = 12; cloudColor = isNight ? 'rgba(30, 41, 59, 0.4)' : 'rgba(100, 116, 139, 0.3)'; break;
                case 'thunderstorm': cloudCount = 15; cloudColor = isNight ? 'rgba(15, 23, 42, 0.6)' : 'rgba(51, 65, 85, 0.5)'; break;
                case 'clear': cloudCount = 2; break;
            }
            for (let i = 0; i < cloudCount; i++) addEffect('cloud', { color: cloudColor, weather: weatherType });
            if (['rain', 'drizzle', 'thunderstorm'].includes(weatherType)) for(let i=0; i<50; i++) addEffect('raindrop');
            else if (isNight && weatherType === 'clear') for(let i=0; i<100; i++) addEffect('star');
        }

        function addEffect(type, options = {}) {
            const el = document.createElement('div');
            el.className = type;
            el.style.left = `${Math.random() * 100}vw`;
            const delay = Math.random() * 5;
            el.style.animationDelay = `${delay}s`;

            if (type === 'cloud') {
                el.style.setProperty('--cloud-color', options.color);
                el.style.top = `${Math.random() * 40}vh`;
                el.style.transform = `scale(${0.5 + Math.random() * 0.8})`;
                el.style.opacity = (options.weather === 'clear' ? 0.3 : 0.4) + Math.random() * 0.5;
                el.style.animationDuration = `${60 + Math.random() * 80}s`;
            } else if (type === 'raindrop') {
                 el.style.animationDuration = `${0.5 + Math.random() * 0.5}s`;
            } else if (type === 'star') {
                el.style.animationDuration = `${1.5 + Math.random() * 2}s`;
            }
            weatherBg.appendChild(el);
        }

        // --- VIEW MANAGEMENT ---
        function switchView(viewId, manualSwitch = false) {
            clearInterval(viewInterval);
            
            if (activeViewId !== 'night-view' && activeViewId !== 'new-event-view') {
                previousViewId = activeViewId;
            }

            if (!manualSwitch && settings.viewCycle.length > 1) {
                viewInterval = setInterval(() => {
                    const cyclingViews = settings.viewCycle;
                    const currentIndex = cyclingViews.indexOf(activeViewId);
                    const nextIndex = (currentIndex + 1) % cyclingViews.length;
                    switchView(cyclingViews[nextIndex]);
                }, 30000);
            }

            monthSelector.classList.toggle('hidden', !['monthly-view', 'dense-view'].includes(viewId));
            
            activeViewId = viewId;
            document.querySelectorAll('.view').forEach(v => v.classList.remove('active'));
            document.getElementById(viewId)?.classList.add('active');

            if(manualSwitch){
                viewSelector.value = viewId;
                settings.defaultView = viewId;
                saveSettings();
            }
        }

        // --- GOOGLE CALENDAR API & AUTH ---
        async function initializeGapiClient() {
            try {
                updateLoadingProgress(10, 'Initializing Google Services...');
                await gapi.client.init({ apiKey: GOOGLE_API_KEY, discoveryDocs: ["https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest"] });
                gapiInited = true;
                tokenClient = google.accounts.oauth2.initTokenClient({
                    client_id: GOOGLE_CLIENT_ID,
                    scope: 'https://www.googleapis.com/auth/calendar.readonly https://www.googleapis.com/auth/calendar.events.readonly',
                    callback: handleTokenResponse,
                });
                
                const storedToken = localStorage.getItem('googleOauthToken');
                if (storedToken) {
                    const token = JSON.parse(storedToken);
                    if (token.expires_at > Date.now()) {
                        gapi.client.setToken(token);
                        await handleSuccessfulLogin();
                    } else {
                        showAuthScreen();
                    }
                } else {
                    showAuthScreen();
                }
            } catch (err) { console.error("GAPI/Token Client Error:", err); showAuthScreen("Error initializing. Please try again."); }
        }
        
        function showAuthScreen(message = 'Please connect your Google Calendar to see your events.') {
             loadingScreen.style.opacity = '0';
             setTimeout(() => loadingScreen.classList.add('hidden'), 500);
             authScreen.classList.remove('hidden');
             authorizeButton.disabled = false;
             authorizeButton.textContent = 'Connect Google Calendar';
             document.getElementById('auth-message').textContent = message;
        }

        function handleTokenResponse(resp) {
            if (resp.error) throw resp;
            const token = gapi.client.getToken();
            token.expires_at = Date.now() + (parseInt(token.expires_in, 10) * 1000);
            localStorage.setItem('googleOauthToken', JSON.stringify(token));
            handleSuccessfulLogin();
        }

        async function handleSuccessfulLogin() {
            authScreen.classList.add('hidden');
            loadingScreen.classList.remove('hidden');
            loadingScreen.style.opacity = '1';
            updateLoadingProgress(30, 'Authentication successful...');
            
            await loadCalendarList();
            updateLoadingProgress(50, 'Loading your calendars...');
            
            await refreshAllData();
            updateLoadingProgress(70, 'Fetching events...');

            await fetchWeatherAndQuote();
            updateLoadingProgress(90, 'Getting weather & quote...');

            startRealtimePolling();
            switchView(settings.defaultView, true);

            updateLoadingProgress(100, 'Done!');
            setTimeout(() => {
                loadingScreen.style.opacity = '0';
                setTimeout(() => loadingScreen.classList.add('hidden'), 500);
            }, 500);
        }
        
        authorizeButton.addEventListener('click', () => {
             loadingScreen.classList.remove('hidden');
             loadingScreen.style.opacity = '1';
             if (gapi.client.getToken() === null) tokenClient.requestAccessToken({prompt: 'consent'});
             else tokenClient.requestAccessToken({prompt: ''});
        });

        async function refreshAllData() {
            await fetchEventsForMonth();
            renderAllViews();
        }

        async function loadCalendarList() {
            const response = await gapi.client.calendar.calendarList.list();
            calendarSelector.innerHTML = '';
            response.result.items.forEach(cal => {
                const option = document.createElement('option');
                option.value = cal.id;
                option.textContent = cal.summary;
                if (settings.lastCalendarId === cal.id) {
                    option.selected = true;
                } else if (!settings.lastCalendarId && cal.primary) {
                    option.selected = true;
                }
                calendarSelector.appendChild(option);
                calendarColors[cal.id] = cal.backgroundColor;
            });
            if (!settings.lastCalendarId) {
                settings.lastCalendarId = calendarSelector.value;
            }
             applySettingsToUI();
        }

        async function fetchEventsForMonth(isPoll = false) {
            const calendarId = calendarSelector.value || settings.lastCalendarId;
            if (!calendarId) return;
            const now = new Date();
            const year = now.getFullYear();
            const timeMin = new Date(year, 0, 1).toISOString(); // Fetch whole year for agenda/weekly views
            const timeMax = new Date(year + 1, 0, 1).toISOString();

            try {
                const response = await gapi.client.calendar.events.list({
                    'calendarId': calendarId, 'timeMin': timeMin, 'timeMax': timeMax,
                    'showDeleted': false, 'singleEvents': true, 'orderBy': 'startTime'
                });
                const fetchedEvents = response.result.items;
                if(isPoll) return fetchedEvents;
                currentEvents = fetchedEvents;
            } catch(err) {
                 console.error('Error fetching events:', err);
                 if(err.status === 401) showAuthScreen('Your session expired. Please reconnect.');
                 if(isPoll) return [];
                 currentEvents = [];
            }
        }

        // --- REAL-TIME & NEW EVENT LOGIC ---
        function startRealtimePolling() {
            if (realtimePollingInterval) clearInterval(realtimePollingInterval);
            realtimePollingInterval = setInterval(checkForUpdates, 60 * 1000);
        }

        async function checkForUpdates() {
            const newEventsList = await fetchEventsForMonth(true);
            const oldEventIds = new Set(currentEvents.map(e => e.id));
            const newEvent = newEventsList.find(e => !oldEventIds.has(e.id) && new Date(e.created) > Date.now() - 65000);
            
            if (newEventsList.length !== currentEvents.length || newEvent) {
                currentEvents = newEventsList;
                renderAllViews();
                if (newEvent) showNewEventScreen(newEvent);
            }
        }

        function showNewEventScreen(event) {
            document.getElementById('new-event-title').textContent = event.summary;
            const startDate = new Date(event.start.dateTime || event.start.date);
            document.getElementById('new-event-time').textContent = startDate.toLocaleString([], { dateStyle: 'full', timeStyle: 'short' });
            switchView('new-event-view');
            setTimeout(() => {
                if (activeViewId === 'new-event-view') switchView(previousViewId || settings.defaultView);
            }, 15000);
        }
        
        // --- RENDERING VIEWS ---
        function setupCalendarHeaders() {
            const days = ["SUN", "MON", "TUE", "WED", "THU", "FRI", "SAT"];
            const headerHTML = days.map(day => `<div class="p-2 text-center font-semibold opacity-70">${day}</div>`).join('');
            document.getElementById('calendar-header').innerHTML = headerHTML;
            document.getElementById('dense-calendar-header').innerHTML = headerHTML;
        }

        function setupMonthSelector() {
            const months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
            const currentMonth = new Date().getMonth();
            months.forEach((month, index) => {
                const option = document.createElement('option');
                option.value = index;
                option.textContent = month;
                if (index === currentMonth) option.selected = true;
                monthSelector.appendChild(option);
            });
        }
        setupMonthSelector();

        function renderAllViews() {
            renderQuickLook();
            renderMonthlyView(false); // Monthly
            renderMonthlyView(true); // Dense
            renderWeeklyView();
            renderAgendaView();
        }

        function renderQuickLook() {
            const eventsContainer = document.getElementById('events-container');
            const now = new Date();
            const upcomingEvents = currentEvents
                .filter(e => new Date(e.start.dateTime || e.start.date) >= now)
                .slice(0, 2);

            eventsContainer.innerHTML = '';
            if (upcomingEvents.length === 0) {
                 eventsContainer.innerHTML = '<p class="text-xl opacity-80">No upcoming events found.</p>';
                 return;
            }
            upcomingEvents.forEach((event, index) => {
                 const { summary, start } = event;
                 const startDate = new Date(start.dateTime || start.date);
                 const isAllDay = !start.dateTime;
                 const timeString = isAllDay ? 'All Day' : startDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
                 
                 const diffDays = Math.ceil((new Date(startDate).setHours(0,0,0,0) - new Date().setHours(0,0,0,0)) / (1000 * 60 * 60 * 24));
                 const relativeTime = diffDays === 0 ? 'Today' : diffDays === 1 ? 'Tomorrow' : `in ${diffDays} days`;

                 const eventEl = document.createElement('div');
                 if (index === 0) {
                     eventEl.innerHTML = `<p class="text-xl opacity-80">${startDate.toLocaleDateString([], {weekday: 'long'})}</p>
                                          <h2 class="text-4xl lg:text-5xl font-bold truncate">${summary}</h2>
                                          <p class="text-2xl opacity-90">${relativeTime} at ${timeString}</p>
                                          <hr class="mt-4 border-t-2 opacity-50 w-1/3">`;
                 } else {
                      eventEl.innerHTML = `<p class="text-lg opacity-80">${startDate.toLocaleDateString([], {weekday: 'short', month: 'short', day: 'numeric'})}</p>
                                           <h2 class="text-3xl lg:text-4xl font-semibold truncate">${summary}</h2>
                                           <p class="text-xl opacity-90">${relativeTime} at ${timeString}</p>`;
                 }
                 eventsContainer.appendChild(eventEl);
            });
        }

        function getContrastColor(hex) {
            if (!hex) return '#FFFFFF';
            const r = parseInt(hex.substr(1, 2), 16);
            const g = parseInt(hex.substr(3, 2), 16);
            const b = parseInt(hex.substr(5, 2), 16);
            const yiq = ((r * 299) + (g * 587) + (b * 114)) / 1000;
            return (yiq >= 128) ? '#000000' : '#FFFFFF';
        }

        function renderMonthlyView(dense = false) {
            const bodyId = dense ? 'dense-calendar-body' : 'calendar-body';
            const titleId = dense ? 'dense-calendar-title' : 'calendar-title';
            const dayClass = dense ? 'dense-day' : '';

            const calendarBodyEl = document.getElementById(bodyId);
            const titleEl = document.getElementById(titleId);
            const now = new Date();
            const year = now.getFullYear();
            const month = parseInt(monthSelector.value);
            
            titleEl.textContent = new Date(year, month).toLocaleDateString([], { month: 'long', year: 'numeric' });
            calendarBodyEl.innerHTML = '';

            const firstDayOfMonth = new Date(year, month, 1).getDay();
            const daysInMonth = new Date(year, month + 1, 0).getDate();

            for (let i = 0; i < firstDayOfMonth; i++) calendarBodyEl.innerHTML += `<div class="calendar-day other-month p-2"></div>`;
            
            for (let day = 1; day <= daysInMonth; day++) {
                const dayDate = new Date(year, month, day);
                const dayEvents = currentEvents.filter(e => {
                    const eventDate = new Date(e.start.dateTime || e.start.date);
                    return eventDate.getFullYear() === year && eventDate.getMonth() === month && eventDate.getDate() === day;
                });
                const isToday = now.getDate() === day && now.getMonth() === month;
                let dayHtml = `<div class="calendar-day p-2 overflow-hidden ${dayClass} ${isToday ? 'bg-blue-800/50' : ''}">
                                <div class="font-semibold text-right">${day}</div>
                                <div class="text-xs space-y-1 mt-1 flex-grow overflow-y-auto">`;
                
                dayEvents.sort((a,b) => (a.start.dateTime ? 0 : -1) - (b.start.dateTime ? 0 : -1)); // all-day first
                
                dayEvents.forEach(e => {
                     const bgColor = calendarColors[e.organizer.email] || '#4a5568';
                     const textColor = getContrastColor(bgColor);
                     const timeString = e.start.dateTime ? new Date(e.start.dateTime).toLocaleTimeString([], {hour:'2-digit', minute:'2-digit'}) : 'All Day';
                     if(dense) {
                         dayHtml += `<div class="p-1 rounded mb-1 text-left" style="background-color: ${bgColor}e0; color: ${textColor};">
                                        <p class="font-bold truncate">${e.summary}</p>
                                        <p class="truncate opacity-80 text-[10px]">${timeString}</p>
                                     </div>`;
                     } else {
                        dayHtml += `<div class="rounded px-1 truncate" style="background-color: ${bgColor}; color: ${textColor};">${e.summary}</div>`;
                     }
                });
                dayHtml += `</div></div>`;
                calendarBodyEl.innerHTML += dayHtml;
            }
        }
        
        function renderWeeklyView() {
            const bodyEl = document.getElementById('weekly-body');
            const headerEl = document.getElementById('weekly-header');
            bodyEl.innerHTML = '';
            headerEl.innerHTML = '';

            const today = new Date();
            const startOfWeek = new Date(today.setDate(today.getDate() - today.getDay()));

            for (let i = 0; i < 7; i++) {
                const day = new Date(startOfWeek);
                day.setDate(startOfWeek.getDate() + i);
                
                headerEl.innerHTML += `<div class="p-2 text-center font-semibold opacity-70">${day.toLocaleDateString([], {weekday: 'short'}).toUpperCase()}<br>${day.getDate()}</div>`;

                const dayEvents = currentEvents.filter(e => {
                    const eventDate = new Date(e.start.dateTime || e.start.date);
                    return eventDate.toDateString() === day.toDateString();
                });

                let dayHtml = `<div class="calendar-day p-2 overflow-hidden dense-day">
                                <div class="text-xs space-y-1 mt-1 flex-grow overflow-y-auto">`;
                dayEvents.forEach(e => {
                     const bgColor = calendarColors[e.organizer.email] || '#4a5568';
                     const textColor = getContrastColor(bgColor);
                     const timeString = e.start.dateTime ? new Date(e.start.dateTime).toLocaleTimeString([], {hour:'2-digit', minute:'2-digit'}) : 'All Day';
                     dayHtml += `<div class="p-1 rounded mb-1 text-left" style="background-color: ${bgColor}e0; color: ${textColor};">
                                    <p class="font-bold truncate">${e.summary}</p>
                                    <p class="truncate opacity-80 text-[10px]">${timeString}</p>
                                 </div>`;
                });
                dayHtml += `</div></div>`;
                bodyEl.innerHTML += dayHtml;
            }
        }

        function renderAgendaView() {
            const bodyEl = document.getElementById('agenda-body');
            bodyEl.innerHTML = '';
            const now = new Date();
            const upcomingEvents = currentEvents
                .filter(e => new Date(e.start.dateTime || e.start.date) >= now)
                .slice(0, 50);

            if(upcomingEvents.length === 0) {
                bodyEl.innerHTML = `<p class="text-xl opacity-80">No upcoming events.</p>`;
                return;
            }

            let lastDate = '';
            upcomingEvents.forEach(e => {
                const startDate = new Date(e.start.dateTime || e.start.date);
                const dateStr = startDate.toLocaleDateString([], { weekday: 'long', month: 'long', day: 'numeric' });
                
                if (dateStr !== lastDate) {
                    bodyEl.innerHTML += `<h2 class="text-2xl font-bold border-b-2 opacity-60 mt-4">${dateStr}</h2>`;
                    lastDate = dateStr;
                }
                const timeString = e.start.dateTime ? startDate.toLocaleTimeString([], {hour:'2-digit', minute:'2-digit'}) : 'All Day';
                const bgColor = calendarColors[e.organizer.email] || '#4a5568';
                
                bodyEl.innerHTML += `
                    <div class="flex items-center gap-4 p-3 rounded-lg" style="background-color: ${bgColor}40;">
                        <div class="w-20 text-center font-semibold">${timeString}</div>
                        <div class="border-l-4 pl-4" style="border-color: ${bgColor};">
                            <p class="font-bold text-lg">${e.summary}</p>
                            <p class="text-sm opacity-70">${e.description || ''}</p>
                        </div>
                    </div>
                `;
            });
        }

        // --- EXTERNAL APIS & DEBUG ---
        function setupDebugControls() {
            document.getElementById('debug-time').addEventListener('input', (e) => {
                debugMode.time = e.target.value || null;
                updateTimeAndDate();
            });
            document.getElementById('debug-weather').addEventListener('change', (e) => {
                debugMode.weather = e.target.value || null;
                fetchWeatherAndQuote();
            });
        }

        async function fetchWeatherAndQuote() {
             if (debugMode.weather) {
                currentWeatherData = { temp: `69°F`, main: debugMode.weather, description: `Debug: ${debugMode.weather}` };
                updateWeatherUI();
                updateBackground();
                fetchAIQuote();
                return;
             }
             navigator.geolocation.getCurrentPosition(async (position) => {
                const { latitude, longitude } = position.coords;
                try {
                    const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${OPENWEATHER_API_KEY}&units=imperial`);
                    const data = await response.json();
                    currentWeatherData = { temp: `${Math.round(data.main.temp)}°F`, main: data.weather[0].main, description: data.weather[0].description };
                    updateWeatherUI();
                    updateBackground();
                    fetchAIQuote();
                } catch(err) { console.error("Error fetching weather:", err); }
            }, () => console.error("Geolocation failed. Weather will not be available."));
        }
        
        function updateWeatherUI() {
            const emoji = getWeatherEmoji(currentWeatherData.main);
            document.getElementById('quick-temp').textContent = currentWeatherData.temp;
            document.getElementById('quick-weather-emoji').textContent = emoji;
            document.getElementById('night-temp').textContent = currentWeatherData.temp;
            document.getElementById('night-weather-emoji').textContent = emoji;
        }

        function getWeatherEmoji(weather) {
            const map = { Clear: '☀️', Clouds: '☁️', Rain: '🌧️', Drizzle: '💧', Thunderstorm: '⛈️', Snow: '❄️' };
            const timeOfDay = getTimeOfDay();
            if(timeOfDay === 'night' && weather === 'Clear') return '🌙';
            return map[weather] || '🌫️';
        }
        
        async function fetchAIQuote() {
            const prompt = `Generate a short, insightful, one-sentence quote. The current time is ${new Date().toLocaleTimeString()}, the weather is ${currentWeatherData.description || 'clear'}, and my next event is: ${currentEvents[0]?.summary || 'nothing scheduled'}. Keep the quote generic but inspired by these elements.`;
            try {
                // Using a placeholder fetch as the real API might be restricted.
                // Replace with your actual API call if needed.
                const mockQuotes = [
                    "Even a quiet day holds the potential for a great story.", "The rhythm of the rain is a reminder that every storm passes.", "Clarity outside can inspire clarity within.", "The best preparation for tomorrow is doing your best today."
                ];
                let quote = mockQuotes[Math.floor(Math.random() * mockQuotes.length)];
                document.getElementById('quote-container').textContent = `"${quote}"`;

            } catch (err) {
                console.error("Error fetching AI quote:", err);
                document.getElementById('quote-container').textContent = `"The future belongs to those who believe in the beauty of their dreams."`;
            }
        }

        // --- INITIALIZATION ---
        window.onload = initializeApp;
    </script>
</body>
</html>

