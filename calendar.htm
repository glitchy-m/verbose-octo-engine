<!DOCTYPE html>
<html lang="en" class="h-full">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dynamic Calendar Display</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <script src="https://apis.google.com/js/api.js"></script>
    <script src="https://accounts.google.com/gsi/client" async defer></script>
    <style>
        /* Custom styles and animations */
        body {
            font-family: 'Inter', sans-serif;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
            transition: color 0.5s ease-in-out;
        }

        /* --- Animated Weather Backgrounds --- */
        .weather-bg {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
            transition: background 1.5s ease-in-out;
            overflow: hidden;
        }
        
        .raindrop, .star, .cloud {
            position: absolute;
            opacity: 0;
            animation-duration: 2s;
            animation-timing-function: linear;
            animation-iteration-count: infinite;
        }

        .raindrop {
            width: 2px;
            height: 15px;
            background: linear-gradient(to bottom, rgba(255,255,255,0), rgba(255,255,255,0.4));
            animation-name: fall;
        }

        @keyframes fall {
            0% { transform: translateY(-10vh); opacity: 1; }
            100% { transform: translateY(110vh); opacity: 1; }
        }
        
        .star {
            width: 2px;
            height: 2px;
            background-color: white;
            border-radius: 50%;
            animation-name: twinkle;
        }
        
        @keyframes twinkle {
            0%, 100% { opacity: 0; }
            50% { opacity: 0.8; }
        }
        
        .cloud {
            width: 200px;
            height: 60px;
            background: var(--cloud-color);
            border-radius: 100px;
            animation-name: move-cloud;
        }
        .cloud::before, .cloud::after {
            content: '';
            position: absolute;
            background: var(--cloud-color);
            border-radius: 50%;
        }
        .cloud::before { width: 100px; height: 80px; top: -40px; left: 20px; }
        .cloud::after { width: 120px; height: 60px; top: -30px; right: 30px; }

        @keyframes move-cloud {
            0% { transform: translateX(-250px); }
            100% { transform: translateX(110vw); }
        }

        /* --- View Transitions --- */
        .view {
            display: none;
            animation: fadeIn 0.8s ease-in-out;
            opacity: 0;
            will-change: opacity;
        }

        .view.active {
            display: flex;
            opacity: 1;
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        @keyframes pulse-border {
            0%, 100% { border-color: #f59e0b; }
            50% { border-color: #fcd34d; }
        }

        .new-event-alert { animation: pulse-border 2s infinite; }
        
        /* --- Calendar Grid --- */
        .calendar-grid {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 1px;
            background-color: rgba(255, 255, 255, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        .calendar-day, .calendar-header {
            background-color: rgba(17, 24, 39, 0.5);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
        }
        .calendar-day { min-height: 10vh; }
        .calendar-day.other-month { opacity: 0.4; }
        
        #toggle-controls-btn { 
            transition: opacity 0.5s ease-in-out, transform 0.3s ease;
        }
        
        .control-hidden {
            opacity: 0;
            pointer-events: none;
        }
        
        .control-visible {
            opacity: 1;
            pointer-events: auto;
        }
    </style>
</head>
<body class="h-full bg-gray-900 text-white overflow-hidden">
    <!-- Weather Background -->
    <div id="weather-bg" class="weather-bg"></div>

    <!-- Main Container -->
    <div id="main-container" class="relative flex flex-col h-full p-4 sm:p-6 md:p-8 lg:p-12">
        
        <!-- Loading Screen -->
        <div id="loading-screen" class="absolute inset-0 z-50 flex flex-col items-center justify-center bg-gray-900/90 backdrop-blur-sm transition-opacity duration-500">
            <div class="w-full max-w-md text-center">
                <h1 class="text-3xl font-bold mb-4">Initializing Display...</h1>
                <div class="w-full bg-gray-700 rounded-full h-2.5 mb-2">
                    <div id="progress-bar" class="bg-blue-600 h-2.5 rounded-full" style="width: 0%; transition: width 0.5s ease-out;"></div>
                </div>
                <p id="loading-message" class="text-gray-300">Getting things ready...</p>
            </div>
        </div>

        <!-- Auth Screen -->
        <div id="auth-screen" class="absolute inset-0 z-40 flex items-center justify-center bg-gray-900/80 backdrop-blur-md hidden">
            <div class="text-center">
                <h1 class="text-3xl font-bold mb-4">Welcome to Your Dynamic Display</h1>
                <p class="mb-6 text-gray-300">Please connect your Google Calendar to see your events.</p>
                <button id="authorize-button" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg transition-colors disabled:bg-gray-500 disabled:cursor-not-allowed" disabled>
                    Initializing...
                </button>
            </div>
        </div>

        <!-- Master Controls Toggle -->
        <button id="toggle-controls-btn" class="absolute top-4 left-4 z-50 text-white p-2 bg-black/20 rounded-full hover:bg-black/40 transition-all control-hidden">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="opacity-75"><circle cx="12" cy="12" r="3"></circle><path d="M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z"></path></svg>
        </button>

        <!-- Settings & Debug Panel -->
        <div id="settings-panel" class="absolute top-16 left-4 z-50 bg-black/30 backdrop-blur-md p-4 rounded-lg space-y-4 hidden text-white w-64 control-hidden">
            <div>
                <h3 class="font-bold text-lg mb-2">Display Settings</h3>
                <div class="space-y-2 text-sm">
                    <p class="font-semibold">Auto-Cycle Views:</p>
                    <div id="cycle-views-options" class="grid grid-cols-2 gap-2"></div>
                    <label class="flex items-center justify-between"><p>Night Start:</p><input type="time" id="night-start-time" class="bg-gray-700/50 rounded p-1 border-gray-600/50 border w-28"></label>
                    <label class="flex items-center justify-between"><p>Night End:</p><input type="time" id="night-end-time" class="bg-gray-700/50 rounded p-1 border-gray-600/50 border w-28"></label>
                </div>
            </div>
            <div>
                <h3 class="font-bold text-lg mb-2">Debug Controls</h3>
                 <div class="space-y-2 text-sm">
                    <label class="flex items-center justify-between"><p>Time:</p><input type="time" id="debug-time" class="bg-gray-700/50 rounded p-1 border-gray-600/50 border w-28"></label>
                    <label class="flex items-center justify-between"><p>Weather:</p><select id="debug-weather" class="bg-gray-700/50 rounded p-1 border-gray-600/50 border w-28"><option value="">Live</option><option>Clear</option><option>Clouds</option><option>Rain</option><option>Drizzle</option><option>Thunderstorm</option><option>Snow</option></select></label>
                </div>
            </div>
        </div>

        <!-- Header Controls -->
        <div id="header-controls" class="absolute top-4 right-4 z-40 flex items-center gap-4 hidden control-hidden">
            <select id="calendar-selector" class="bg-black/20 text-white rounded-md p-2 border border-white/20"></select>
            <select id="month-selector" class="bg-black/20 text-white rounded-md p-2 border border-white/20 hidden"></select>
            <select id="view-selector" class="bg-black/20 text-white rounded-md p-2 border border-white/20"></select>
        </div>

        <!-- All Views -->
        <div id="quick-look-view" class="view flex-col justify-between h-full w-full">
            <div class="flex-grow flex flex-col justify-center items-center text-center">
                <h1 id="current-time" class="text-7xl md:text-9xl font-bold mb-4">00:00</h1>
                <h2 id="current-date" class="text-2xl md:text-4xl mb-8">Monday, January 1</h2>
                <div id="next-event" class="text-xl md:text-2xl mb-12">
                    <p class="text-gray-300">Your next event:</p>
                    <p class="font-bold" id="next-event-title">No upcoming events</p>
                    <p id="next-event-time" class="text-gray-300"></p>
                </div>
                <div id="weather-info" class="text-lg md:text-xl">
                    <p id="temperature">--°</p>
                    <p id="weather-description" class="text-gray-300">Loading weather...</p>
                </div>
            </div>
            <div class="text-center pb-8">
                <p id="quote-container" class="text-lg italic max-w-2xl mx-auto">"Loading inspirational quote..."</p>
            </div>
        </div>

        <div id="monthly-view" class="view flex-col h-full w-full">
            <h1 id="monthly-title" class="text-4xl md:text-5xl font-bold mb-4">January 2023</h1>
            <div class="calendar-grid rounded-lg overflow-hidden">
                <div class="calendar-header p-2 text-center font-bold">Sun</div>
                <div class="calendar-header p-2 text-center font-bold">Mon</div>
                <div class="calendar-header p-2 text-center font-bold">Tue</div>
                <div class="calendar-header p-2 text-center font-bold">Wed</div>
                <div class="calendar-header p-2 text-center font-bold">Thu</div>
                <div class="calendar-header p-2 text-center font-bold">Fri</div>
                <div class="calendar-header p-2 text-center font-bold">Sat</div>
                <div id="monthly-grid" class="col-span-7 grid grid-cols-7 gap-1"></div>
            </div>
        </div>

        <div id="weekly-view" class="view flex-col h-full w-full">
            <h1 id="weekly-title" class="text-4xl md:text-5xl font-bold mb-4">This Week</h1>
            <div id="weekly-body" class="flex-grow space-y-2 overflow-y-auto pr-2"></div>
        </div>

        <div id="daily-view" class="view flex-col h-full w-full">
            <h1 id="daily-title" class="text-4xl md:text-5xl font-bold mb-4">Today</h1>
            <div id="daily-body" class="flex-grow space-y-4 overflow-y-auto pr-2"></div>
        </div>

        <div id="dense-view" class="view flex-col h-full w-full">
            <h1 class="text-4xl md:text-5xl font-bold mb-4">Upcoming Events</h1>
            <div id="dense-body" class="flex-grow space-y-2 overflow-y-auto pr-2"></div>
        </div>

        <div id="focus-view" class="view flex-col justify-center items-center h-full w-full text-center">
            <div class="max-w-2xl">
                <h1 id="focus-time" class="text-7xl md:text-9xl font-bold mb-4">00:00</h1>
                <h2 id="focus-date" class="text-2xl md:text-4xl mb-8">Monday, January 1</h2>
                <div id="focus-event" class="text-xl md:text-2xl mb-12">
                    <p class="text-gray-300">Your next event:</p>
                    <p class="font-bold" id="focus-event-title">No upcoming events</p>
                    <p id="focus-event-time" class="text-gray-300"></p>
                </div>
            </div>
        </div>

        <div id="night-view" class="view flex-col justify-center items-center h-full w-full text-center">
            <div class="max-w-2xl">
                <h1 class="text-7xl md:text-9xl font-bold mb-4">Good Night</h1>
                <h2 class="text-2xl md:text-4xl mb-8">Time to rest</h2>
                <p class="text-xl text-gray-300">Your next event is at <span id="next-morning-event">8:00 AM</span></p>
            </div>
        </div>

        <div id="new-event-view" class="view flex-col justify-center items-center h-full w-full text-center">
            <div class="max-w-2xl">
                <h1 class="text-7xl md:text-9xl font-bold mb-4">New Event!</h1>
                <h2 class="text-2xl md:text-4xl mb-8" id="new-event-title">Meeting with Team</h2>
                <p class="text-xl text-gray-300">Starting now</p>
            </div>
        </div>
    </div>

    <script type="module">
        // --- CONFIGURATION ---
        const GOOGLE_CLIENT_ID = '415018106195-utjkai9r1ar3pd6ep5f06kt5ma0tfg0k.apps.googleusercontent.com';
        const GOOGLE_API_KEY = 'AIzaSyA-Gqmhu3nG6jAPE8VFyzWv5Ppdbf1Ot8k';
        const OPENWEATHER_API_KEY = 'e59fe270071be5ed24b5a1ec85ef84c3';
        const OPENAI_API_KEY = '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';
        const VIEW_DEFINITIONS = [
            { id: 'quick-look-view', name: 'Quick Look' },
            { id: 'monthly-view', name: 'Monthly' },
            { id: 'weekly-view', name: 'Weekly' },
            { id: 'daily-view', name: 'Daily' },
            { id: 'dense-view', name: 'Dense' },
            { id: 'focus-view', name: 'Focus' }
        ];
        
        // --- STATE ---
        let settings = {};
        let activeViewId = 'quick-look-view';
        let viewInterval;
        let tokenClient;
        let currentWeatherData = {};
        let currentEvents = [];
        let calendarColors = {};
        let controlsHideTimeout;
        let debugMode = { time: null, weather: null };
        let mouseIdleTimer;
        let controlsVisible = false;

        // --- DOM Elements ---
        const mainContainer = document.getElementById('main-container');
        const toggleControlsBtn = document.getElementById('toggle-controls-btn');
        const settingsPanel = document.getElementById('settings-panel');
        const headerControls = document.getElementById('header-controls');
        const loadingScreen = document.getElementById('loading-screen');
        const authScreen = document.getElementById('auth-screen');
        const authorizeButton = document.getElementById('authorize-button');
        const calendarSelector = document.getElementById('calendar-selector');
        const monthSelector = document.getElementById('month-selector');
        const viewSelector = document.getElementById('view-selector');
        const weatherBg = document.getElementById('weather-bg');

        // --- CORE LOGIC ---
        function initializeApp() {
            loadSettings();
            setupEventListeners();
            updateTimeAndDate();
            setInterval(updateTimeAndDate, 1000 * 60); 
            gapi.load('client', initializeGapiClient);
            hideControls(); // Initially hide controls
        }

        function setupEventListeners() {
            document.body.addEventListener('mousemove', handleMouseMove);
            document.body.addEventListener('click', handleMouseMove);
            document.body.addEventListener('keydown', handleMouseMove);
            toggleControlsBtn.addEventListener('click', () => {
                settingsPanel.classList.toggle('hidden');
                showControlsTemporarily();
            });
            settingsPanel.addEventListener('change', handleSettingsChange);
            viewSelector.addEventListener('change', (e) => switchView(e.target.value, true));
            calendarSelector.addEventListener('change', handleCalendarChange);
            monthSelector.addEventListener('change', handleMonthChange);
            authorizeButton.addEventListener('click', handleAuthClick);
            
            // Debug controls
            document.getElementById('debug-time').addEventListener('change', (e) => {
                debugMode.time = e.target.value;
                updateTimeAndDate();
            });
            document.getElementById('debug-weather').addEventListener('change', (e) => {
                debugMode.weather = e.target.value;
                updateWeatherBackground();
            });
        }

        function handleMouseMove() {
            showControlsTemporarily();
        }

        function showControlsTemporarily() {
            if (!controlsVisible) {
                toggleControlsBtn.classList.remove('control-hidden');
                toggleControlsBtn.classList.add('control-visible');
                headerControls.classList.remove('control-hidden');
                headerControls.classList.add('control-visible');
                if (!settingsPanel.classList.contains('hidden')) {
                    settingsPanel.classList.remove('control-hidden');
                    settingsPanel.classList.add('control-visible');
                }
                controlsVisible = true;
            }
            
            clearTimeout(mouseIdleTimer);
            mouseIdleTimer = setTimeout(hideControls, 3000);
        }

        function hideControls() {
            toggleControlsBtn.classList.remove('control-visible');
            toggleControlsBtn.classList.add('control-hidden');
            headerControls.classList.remove('control-visible');
            headerControls.classList.add('control-hidden');
            settingsPanel.classList.remove('control-visible');
            settingsPanel.classList.add('control-hidden');
            settingsPanel.classList.add('hidden');
            controlsVisible = false;
        }

        // --- SETTINGS MANAGEMENT ---
        function loadSettings() {
            const savedSettings = localStorage.getItem('dynamicDisplaySettings');
            const defaultSettings = {
                lastCalendarId: null,
                cycleViews: ['quick-look-view', 'monthly-view', 'weekly-view'],
                nightStart: '22:00',
                nightEnd: '05:00',
            };
            settings = savedSettings ? JSON.parse(savedSettings) : defaultSettings;
            
            const cycleOptionsContainer = document.getElementById('cycle-views-options');
            cycleOptionsContainer.innerHTML = '';
            VIEW_DEFINITIONS.forEach(view => {
                 const isChecked = settings.cycleViews.includes(view.id);
                 cycleOptionsContainer.innerHTML += `<label class="flex items-center gap-2"><input type="checkbox" data-viewid="${view.id}" class="cycle-view-checkbox bg-gray-700/50" ${isChecked ? 'checked' : ''}>${view.name}</label>`;
            });
            document.getElementById('night-start-time').value = settings.nightStart;
            document.getElementById('night-end-time').value = settings.nightEnd;
            
            // Populate view selector
            viewSelector.innerHTML = '';
            VIEW_DEFINITIONS.forEach(view => {
                const option = document.createElement('option');
                option.value = view.id;
                option.textContent = view.name;
                viewSelector.appendChild(option);
            });
            viewSelector.value = activeViewId;
        }

        function saveSettings() {
            localStorage.setItem('dynamicDisplaySettings', JSON.stringify(settings));
        }

        function handleSettingsChange(e) {
            if (e.target.classList.contains('cycle-view-checkbox')) {
                const viewId = e.target.dataset.viewid;
                if (e.target.checked) {
                    settings.cycleViews.push(viewId);
                } else {
                    settings.cycleViews = settings.cycleViews.filter(id => id !== viewId);
                }
            }
            if (e.target.id === 'night-start-time') settings.nightStart = e.target.value;
            if (e.target.id === 'night-end-time') settings.nightEnd = e.target.value;
            
            saveSettings();
            // Re-initialize view cycling with new settings
            switchView(activeViewId, true); 
        }
        
        // --- TIME, DATE & THEME ---
        function getDynamicTheme(hour) {
            if (hour >= 5 && hour < 7) return { 
                bg: 'linear-gradient(to bottom, #3a5a8a, #f7b733)', 
                text: '#FFFFFF',
                textClass: 'text-white'
            }; // Sunrise
            if (hour >= 7 && hour < 17) return { 
                bg: 'linear-gradient(to bottom, #87CEEB, #4682B4)', 
                text: '#000000',
                textClass: 'text-black'
            }; // Day
            if (hour >= 17 && hour < 19) return { 
                bg: 'linear-gradient(to bottom, #ff7e5f, #feb47b)', 
                text: '#FFFFFF',
                textClass: 'text-white'
            }; // Sunset
            if (hour >= 19 && hour < 22) return { 
                bg: 'linear-gradient(to bottom, #0f172a, #3a5a8a)', 
                text: '#FFFFFF',
                textClass: 'text-white'
            }; // Evening
            return { 
                bg: 'linear-gradient(to bottom, #0c0a09, #1e293b)', 
                text: '#FFFFFF',
                textClass: 'text-white'
            }; // Night
        }

        function updateTimeAndDate() {
            const now = new Date();
            let hours = now.getHours();
            let minutes = now.getMinutes();
            
            // Apply debug time if set
            if (debugMode.time) {
                const [debugHours, debugMinutes] = debugMode.time.split(':').map(Number);
                hours = debugHours;
                minutes = debugMinutes;
            }
            
            const [startH] = settings.nightStart.split(':').map(Number);
            const [endH] = settings.nightEnd.split(':').map(Number);
            const isNight = hours >= startH || hours < endH;
            
            const theme = getDynamicTheme(hours);
            weatherBg.style.background = theme.bg;
            
            // Update text color based on theme
            document.body.className = `h-full bg-gray-900 overflow-hidden ${theme.textClass}`;
            
            // Update time display
            document.getElementById('current-time').textContent = 
                `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;
            document.getElementById('focus-time').textContent = 
                `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;
            
            // Update date display
            const dateOptions = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
            const dateString = now.toLocaleDateString(undefined, dateOptions);
            document.getElementById('current-date').textContent = dateString;
            document.getElementById('focus-date').textContent = dateString;
            
            if (isNight) {
                if (activeViewId !== 'night-view') switchView('night-view');
            } else {
                if (activeViewId === 'night-view') switchView(settings.cycleViews[0] || 'quick-look-view');
            }
        }

        // --- VIEW MANAGEMENT ---
        function switchView(viewId, manualSwitch = false) {
            clearInterval(viewInterval);
            
            // Hide all views
            document.querySelectorAll('.view').forEach(view => {
                view.classList.remove('active');
            });
            
            // Show the selected view
            const targetView = document.getElementById(viewId);
            if (targetView) {
                targetView.classList.add('active');
                activeViewId = viewId;
                viewSelector.value = viewId;
                
                // Update view-specific content
                if (viewId === 'monthly-view') renderMonthlyView();
                if (viewId === 'weekly-view') renderWeeklyView();
                if (viewId === 'daily-view') renderDailyView();
                if (viewId === 'dense-view') renderDenseView();
            }
            
            // Set up automatic cycling if not a manual switch
            if (settings.cycleViews.length > 1 && settings.cycleViews.includes(viewId) && !manualSwitch) {
                viewInterval = setInterval(() => {
                    const currentIndex = settings.cycleViews.indexOf(activeViewId);
                    const nextIndex = (currentIndex + 1) % settings.cycleViews.length;
                    switchView(settings.cycleViews[nextIndex]);
                }, 30000);
            }
        }
        
        // --- RENDERING VIEWS ---
        function renderAllViews() {
            renderMonthlyView();
            renderWeeklyView();
            renderDailyView();
            renderDenseView();
            updateQuickLookView();
        }
        
        function renderWeeklyView() {
            const weeklyBody = document.getElementById('weekly-body');
            weeklyBody.innerHTML = '';
            const today = new Date();
            const startOfWeek = new Date(today);
            startOfWeek.setDate(today.getDate() - today.getDay());

            for (let i = 0; i < 7; i++) {
                const day = new Date(startOfWeek);
                day.setDate(startOfWeek.getDate() + i);
                const dayEvents = currentEvents.filter(e => {
                    const eventDate = new Date(e.start.dateTime || e.start.date);
                    return eventDate.toDateString() === day.toDateString();
                });
                
                let dayHtml = `<div class="p-2 rounded-lg bg-black/10">
                                <h3 class="font-bold text-lg border-b border-white/20 pb-1 mb-2">${day.toLocaleDateString([], { weekday: 'long', month: 'short', day: 'numeric' })}</h3>`;
                
                if (dayEvents.length > 0) {
                    dayEvents.forEach(e => {
                        const time = e.start.dateTime ? new Date(e.start.dateTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) : 'All Day';
                        dayHtml += `<div class="flex items-start gap-2 text-sm ml-2"><p class="w-20">${time}</p><p class="flex-1">${e.summary}</p></div>`;
                    });
                } else {
                    dayHtml += `<p class="text-sm ml-2 text-gray-400">No events</p>`;
                }
                dayHtml += `</div>`;
                weeklyBody.innerHTML += dayHtml;
            }
        }
        
        function renderDailyView() {
            const dailyBody = document.getElementById('daily-body');
            const today = new Date();
            const todayEvents = currentEvents.filter(e => {
                const eventDate = new Date(e.start.dateTime || e.start.date);
                return eventDate.toDateString() === today.toDateString();
            });
            
            dailyBody.innerHTML = '';
            
            if (todayEvents.length > 0) {
                todayEvents.forEach(e => {
                    const time = e.start.dateTime ? 
                        new Date(e.start.dateTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) : 
                        'All Day';
                    const endTime = e.end.dateTime ? 
                        new Date(e.end.dateTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) : 
                        '';
                    
                    dailyBody.innerHTML += `
                        <div class="p-4 rounded-lg bg-black/10">
                            <div class="flex justify-between items-center mb-2">
                                <h3 class="font-bold text-xl">${e.summary}</h3>
                                <span class="text-lg">${time}${endTime ? ` - ${endTime}` : ''}</span>
                            </div>
                            ${e.description ? `<p class="text-gray-300">${e.description}</p>` : ''}
                        </div>
                    `;
                });
            } else {
                dailyBody.innerHTML = `
                    <div class="p-4 rounded-lg bg-black/10 text-center">
                        <h3 class="font-bold text-xl mb-2">No events today</h3>
                        <p class="text-gray-300">Enjoy your free time!</p>
                    </div>
                `;
            }
        }
        
        function renderDenseView() {
            const denseBody = document.getElementById('dense-body');
            denseBody.innerHTML = '';
            
            // Get next 10 events
            const upcomingEvents = currentEvents.slice(0, 10);
            
            if (upcomingEvents.length > 0) {
                upcomingEvents.forEach(e => {
                    const eventDate = new Date(e.start.dateTime || e.start.date);
                    const time = e.start.dateTime ? 
                        eventDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) : 
                        'All Day';
                    const date = eventDate.toLocaleDateString([], { month: 'short', day: 'numeric' });
                    
                    denseBody.innerHTML += `
                        <div class="p-3 rounded-lg bg-black/10 flex justify-between items-center">
                            <div>
                                <h3 class="font-bold">${e.summary}</h3>
                                <p class="text-sm text-gray-300">${date} at ${time}</p>
                            </div>
                            <div class="w-4 h-4 rounded-full" style="background-color: ${calendarColors[e.colorId] || '#3b82f6'}"></div>
                        </div>
                    `;
                });
            } else {
                denseBody.innerHTML = `
                    <div class="p-4 rounded-lg bg-black/10 text-center">
                        <h3 class="font-bold text-xl mb-2">No upcoming events</h3>
                        <p class="text-gray-300">Check back later</p>
                    </div>
                `;
            }
        }
        
        function renderMonthlyView() {
            // Monthly view rendering logic
            const monthlyGrid = document.getElementById('monthly-grid');
            monthlyGrid.innerHTML = '';
            
            const now = new Date();
            const year = now.getFullYear();
            const month = now.getMonth();
            
            // Set monthly title
            document.getElementById('monthly-title').textContent = 
                now.toLocaleDateString([], { year: 'numeric', month: 'long' });
            
            // Calculate first day of month and last day of month
            const firstDay = new Date(year, month, 1);
            const lastDay = new Date(year, month + 1, 0);
            
            // Calculate days from previous month to show
            const startDay = firstDay.getDay(); // 0 = Sunday, 1 = Monday, etc.
            
            // Calculate total days in previous month
            const prevMonthLastDay = new Date(year, month, 0).getDate();
            
            // Fill in previous month's days
            for (let i = startDay - 1; i >= 0; i--) {
                const day = document.createElement('div');
                day.className = 'calendar-day other-month p-2';
                day.textContent = prevMonthLastDay - i;
                monthlyGrid.appendChild(day);
            }
            
            // Fill in current month's days
            for (let i = 1; i <= lastDay.getDate(); i++) {
                const day = document.createElement('div');
                day.className = 'calendar-day p-2';
                day.textContent = i;
                
                // Check if this day has events
                const dayEvents = currentEvents.filter(e => {
                    const eventDate = new Date(e.start.dateTime || e.start.date);
                    return eventDate.getDate() === i && 
                           eventDate.getMonth() === month && 
                           eventDate.getFullYear() === year;
                });
                
                if (dayEvents.length > 0) {
                    const eventIndicator = document.createElement('div');
                    eventIndicator.className = 'flex justify-center mt-1';
                    dayEvents.forEach(e => {
                        const dot = document.createElement('div');
                        dot.className = 'w-2 h-2 rounded-full mx-1';
                        dot.style.backgroundColor = calendarColors[e.colorId] || '#3b82f6';
                        eventIndicator.appendChild(dot);
                    });
                    day.appendChild(eventIndicator);
                }
                
                // Highlight today
                if (i === now.getDate() && month === now.getMonth() && year === now.getFullYear()) {
                    day.classList.add('border-2', 'border-yellow-400');
                }
                
                monthlyGrid.appendChild(day);
            }
            
            // Calculate days from next month to show
            const totalCells = 42; // 6 rows x 7 days
            const daysSoFar = startDay + lastDay.getDate();
            const nextMonthDays = totalCells - daysSoFar;
            
            // Fill in next month's days
            for (let i = 1; i <= nextMonthDays; i++) {
                const day = document.createElement('div');
                day.className = 'calendar-day other-month p-2';
                day.textContent = i;
                monthlyGrid.appendChild(day);
            }
        }
        
        function updateQuickLookView() {
            const nextEvent = currentEvents[0];
            const nextEventElement = document.getElementById('next-event');
            const nextEventTitle = document.getElementById('next-event-title');
            const nextEventTime = document.getElementById('next-event-time');
            
            if (nextEvent) {
                const eventDate = new Date(nextEvent.start.dateTime || nextEvent.start.date);
                const timeString = nextEvent.start.dateTime ? 
                    eventDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) : 
                    'All Day';
                
                nextEventTitle.textContent = nextEvent.summary;
                nextEventTime.textContent = timeString;
                nextEventElement.classList.remove('hidden');
            } else {
                nextEventTitle.textContent = 'No upcoming events';
                nextEventTime.textContent = '';
            }
            
            // Update focus view
            const focusEventTitle = document.getElementById('focus-event-title');
            const focusEventTime = document.getElementById('focus-event-time');
            
            if (nextEvent) {
                const eventDate = new Date(nextEvent.start.dateTime || nextEvent.start.date);
                const timeString = nextEvent.start.dateTime ? 
                    eventDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) : 
                    'All Day';
                
                focusEventTitle.textContent = nextEvent.summary;
                focusEventTime.textContent = timeString;
            } else {
                focusEventTitle.textContent = 'No upcoming events';
                focusEventTime.textContent = '';
            }
        }

        // --- EXTERNAL APIS (QUOTES) ---
        async function fetchAIQuote() {
            const prompt = `Generate a short, insightful, one-sentence quote. The time is ${new Date().toLocaleTimeString()}, weather is ${currentWeatherData.description || 'clear'}. My next event is: ${currentEvents[0]?.summary || 'nothing'}. Keep it generic but inspired.`;
            try {
                const response = await fetch("https://api.openai.com/v1/chat/completions", {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${OPENAI_API_KEY}` },
                    body: JSON.stringify({
                        model: "gpt-3.5-turbo",
                        messages: [{ role: "user", content: prompt }],
                        temperature: 0.7,
                        max_tokens: 40,
                    })
                });
                
                if (!response.ok) {
                    // If we get a non-200 response, throw an error to use backup quote
                    throw new Error(`API returned ${response.status}`);
                }
                
                const data = await response.json();
                let quote = data.choices[0].message.content.trim().replace(/^"|"$/g, '');
                
                // Validate that we got a reasonable response
                if (quote.length < 5 || quote.length > 150) {
                    throw new Error('Invalid quote length');
                }
                
                document.getElementById('quote-container').textContent = `"${quote}"`;
            } catch (err) {
                console.warn("Error fetching AI quote, using backup:", err);
                // Use a more reliable backup quote system
                const backupQuotes = [
                    "The future belongs to those who believe in the beauty of their dreams.",
                    "It does not matter how slowly you go as long as you do not stop.",
                    "The only way to do great work is to love what you do.",
                    "Life is what happens to you while you're busy making other plans.",
                    "The purpose of our lives is to be happy.",
                    "Get busy living or get busy dying.",
                    "You only live once, but if you do it right, once is enough."
                ];
                const randomQuote = backupQuotes[Math.floor(Math.random() * backupQuotes.length)];
                document.getElementById('quote-container').textContent = `"${randomQuote}"`;
            }
        }

        // --- GOOGLE API & AUTH ---
        async function initializeGapiClient() {
            try {
                await gapi.client.init({
                    apiKey: GOOGLE_API_KEY,
                    discoveryDocs: ["https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest"],
                });
                
                // Initialize Google Identity Services
                tokenClient = google.accounts.oauth2.initTokenClient({
                    client_id: GOOGLE_CLIENT_ID,
                    scope: "https://www.googleapis.com/auth/calendar.readonly",
                    callback: "", // defined later
                });
                
                // Check if user is already signed in
                if (gapi.client.getToken() === null) {
                    showAuthScreen();
                } else {
                    // User is already signed in
                    loadCalendarList();
                    hideLoadingScreen();
                }
            } catch (error) {
                console.error("Error initializing GAPI client:", error);
                document.getElementById('loading-message').textContent = "Error initializing. Please refresh.";
            }
        }

        function showAuthScreen() {
            loadingScreen.classList.add('hidden');
            authScreen.classList.remove('hidden');
            authorizeButton.disabled = false;
            authorizeButton.textContent = "Connect Google Calendar";
        }

        function hideLoadingScreen() {
            loadingScreen.classList.add('hidden');
            authScreen.classList.add('hidden');
            headerControls.classList.remove('hidden');
            showControlsTemporarily();
        }

        function handleAuthClick() {
            tokenClient.callback = async (resp) => {
                if (resp.error !== undefined) {
                    throw resp;
                }
                await loadCalendarList();
                hideLoadingScreen();
            };

            if (gapi.client.getToken() === null) {
                tokenClient.requestAccessToken({prompt: 'consent'});
            } else {
                tokenClient.requestAccessToken({prompt: ''});
            }
        }

        async function loadCalendarList() {
            try {
                const response = await gapi.client.calendar.calendarList.list();
                const calendars = response.result.items;
                
                calendarSelector.innerHTML = '';
                calendars.forEach(calendar => {
                    const option = document.createElement('option');
                    option.value = calendar.id;
                    option.textContent = calendar.summary;
                    calendarSelector.appendChild(option);
                    
                    // Store calendar color
                    if (calendar.backgroundColor) {
                        calendarColors[calendar.id] = calendar.backgroundColor;
                    }
                });
                
                // Select the last used calendar if available
                if(settings.lastCalendarId && calendars.some(c => c.id === settings.lastCalendarId)) {
                    calendarSelector.value = settings.lastCalendarId;
                }
                
                // Load events for the selected calendar
                loadCalendarEvents(calendarSelector.value);
            } catch (error) {
                console.error("Error loading calendar list:", error);
            }
        }

        function handleCalendarChange() {
            settings.lastCalendarId = calendarSelector.value;
            saveSettings();
            loadCalendarEvents(calendarSelector.value);
        }

        async function loadCalendarEvents(calendarId) {
            try {
                const now = new Date();
                const oneWeekFromNow = new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000);
                
                const response = await gapi.client.calendar.events.list({
                    calendarId: calendarId,
                    timeMin: now.toISOString(),
                    timeMax: oneWeekFromNow.toISOString(),
                    showDeleted: false,
                    singleEvents: true,
                    orderBy: 'startTime',
                });
                
                currentEvents = response.result.items;
                renderAllViews();
                fetchAIQuote();
            } catch (error) {
                console.error("Error loading calendar events:", error);
            }
        }

        function handleMonthChange() {
            // Logic to handle month changes in the monthly view
            renderMonthlyView();
        }

        // --- WEATHER BACKGROUND ---
        function updateWeatherBackground() {
            // This would integrate with a weather API to change the background
            // For now, we'll use the time-based theme
        }

        // --- INITIALIZATION ---
        window.onload = initializeApp;
    </script>
</body>
</html>
